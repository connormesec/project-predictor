[{"B:\\Documents\\JSStuff\\project-predictor\\src\\index.js":"1","B:\\Documents\\JSStuff\\project-predictor\\src\\App.js":"2","B:\\Documents\\JSStuff\\project-predictor\\src\\reportWebVitals.js":"3","B:\\Documents\\JSStuff\\project-predictor\\src\\FileReader.js":"4","B:\\Documents\\JSStuff\\project-predictor\\src\\Dashboard.js":"5","B:\\Documents\\JSStuff\\project-predictor\\src\\Chart.js":"6","B:\\Documents\\JSStuff\\project-predictor\\src\\MonteCarloFrequencyDiagram.js":"7","B:\\Documents\\JSStuff\\project-predictor\\src\\CumulativeFlowDiagram.js":"8","B:\\Documents\\JSStuff\\project-predictor\\src\\LeadTimeConfidenceValues.js":"9","B:\\Documents\\JSStuff\\project-predictor\\src\\monteCarlo.js":"10","B:\\Documents\\JSStuff\\project-predictor\\src\\LeadTimeFrequencyDiagram.js":"11","B:\\Documents\\JSStuff\\project-predictor\\src\\MonteCarloConfidenceValues.js":"12","B:\\Documents\\JSStuff\\project-predictor\\src\\LeadTimeRandomFrequencyDiagram.js":"13"},{"size":474,"mtime":1609782359171,"results":"14","hashOfConfig":"15"},{"size":225,"mtime":1609782359105,"results":"16","hashOfConfig":"15"},{"size":375,"mtime":1606590003854,"results":"17","hashOfConfig":"15"},{"size":6765,"mtime":1609782359127,"results":"18","hashOfConfig":"15"},{"size":13443,"mtime":1610048241864,"results":"19","hashOfConfig":"15"},{"size":34014,"mtime":1609951480232,"results":"20","hashOfConfig":"15"},{"size":582,"mtime":1609782359156,"results":"21","hashOfConfig":"15"},{"size":2725,"mtime":1609782359114,"results":"22","hashOfConfig":"15"},{"size":993,"mtime":1609782359132,"results":"23","hashOfConfig":"15"},{"size":25585,"mtime":1610400003051,"results":"24","hashOfConfig":"15"},{"size":524,"mtime":1609782359137,"results":"25","hashOfConfig":"15"},{"size":1169,"mtime":1609782359151,"results":"26","hashOfConfig":"15"},{"size":534,"mtime":1609782359143,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"i25rlc",{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"30"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"B:\\Documents\\JSStuff\\project-predictor\\src\\index.js",[],["60","61"],"B:\\Documents\\JSStuff\\project-predictor\\src\\App.js",["62"],"import './App.css';\r\nimport FileReader from './FileReader';\r\nimport Dashboard from './Dashboard'\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n        <Dashboard/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","B:\\Documents\\JSStuff\\project-predictor\\src\\reportWebVitals.js",[],"B:\\Documents\\JSStuff\\project-predictor\\src\\FileReader.js",["63","64","65"],"import React, { useState } from \"react\";\r\nimport Papa from \"papaparse\";\r\nimport Chart from \"./Chart\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport IAM from \"./TestData/IAM.json\";\r\nimport CEREBRAL from \"./TestData/CEREBRAL.json\";\r\nimport Usability from \"./TestData/UsabilityStudyFeedbackTFX.json\";\r\nimport MarkAsCorrect from \"./TestData/MarkAsCorrect.json\";\r\nimport ResourceManagement from \"./TestData/ResourceMangement.json\";\r\nimport SSBlackline from \"./TestData/SpreadSheetsBlackline.json\";\r\nimport 'fontsource-roboto';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\n\r\n\r\n //import { calculateMonteCarlo } from './montecarlo.js';\r\n\r\nfunction FileReader(props) {\r\n  const [csvFile, setCsvFile] = useState();\r\n  const [data, setData] = useState();\r\n  const [simulationDate, setSimulationDate] = useState(new Date());\r\n  const [startDate, setStartDate] = useState();\r\n  const [isChecked, setIsChecked] = useState(false);\r\n  const [showComponent, setShowComponent] = useState(false);\r\n  const [monteCarloResult, setMonteCarloResult] = useState();\r\n  const [leadTimeOverride, setLeadTimeOverride] = useState();\r\n  const [backlogOverride, setBacklogOverride] = useState();\r\n\r\n  const handleChange = (event) => setCsvFile(event.target.files[0]);\r\n  const toggleCheckboxChange = () => setIsChecked(!isChecked);\r\n  const handleTextChange = (text) => setLeadTimeOverride(text.target.value)\r\n  const updateData = (result) => {\r\n    setData(result.data);\r\n    // setMonteCarloResult\r\n    // ));\r\n  };\r\n  const importCSV = () =>\r\n    Papa.parse(csvFile, {\r\n      complete: updateData,\r\n      header: true,\r\n    });\r\n  const onButtonClick = () => setShowComponent(true);\r\n\r\n  if (!data) {\r\n    //console.log(leadTimeOverride.target.value)\r\n    return (\r\n      <div>\r\n        <h2>Import CSV File!</h2>\r\n        <input\r\n          className=\"csv-input\"\r\n          type=\"file\"\r\n          name=\"file\"\r\n          onChange={handleChange}\r\n        />\r\n        <p />\r\n        <div>\r\n          <DatePicker\r\n            selected={simulationDate}\r\n            onChange={(date) => setSimulationDate(date)}\r\n            placeholderText=\"Today\"\r\n          />\r\n        </div>\r\n        <p />\r\n        <div>\r\n          <DatePicker\r\n            selected={startDate}\r\n            onChange={(date) => setStartDate(date)}\r\n            placeholderText=\"Start Date (can be blank)\"\r\n          />\r\n        </div>\r\n        <p />\r\n        <input\r\n          type=\"checkbox\"\r\n          value=\"skewNormal\"\r\n          checked={isChecked}\r\n          onChange={toggleCheckboxChange}\r\n        />{\" \"}\r\n        Use Skew-Normal\r\n        <p />\r\n        <button onClick={importCSV}>RUN!</button>\r\n        <p />\r\n        <div>\r\n        <Button variant=\"contained\" onClick={importCSV}>Run</Button>\r\n        </div>\r\n        <div>\r\n          <button onClick={onButtonClick}>Run Test</button>\r\n          {showComponent && test(monteCarloResult)}\r\n        </div>\r\n        <p />\r\n        <label>\r\n          Lead Time Override: \r\n          <input type=\"text\" value={leadTimeOverride} onChange={handleTextChange} />\r\n        </label>\r\n        <p />\r\n        <label>\r\n          Backlog Override: \r\n          <input type=\"text\" value={backlogOverride} onChange={(value) => setBacklogOverride(value)} />\r\n        </label>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n      <div className='importHeader'>\r\n      <h2>Import CSV File!</h2>\r\n        <input\r\n          className=\"csv-input\"\r\n          type=\"file\"\r\n          name=\"file\"\r\n          onChange={handleChange}\r\n        />\r\n        <p />\r\n        <div>\r\n          <DatePicker\r\n            selected={simulationDate}\r\n            onChange={(date) => setSimulationDate(date)}\r\n            placeholderText=\"Today\"\r\n          />\r\n        </div>\r\n        <p />\r\n        <div>\r\n          <DatePicker\r\n            selected={startDate}\r\n            onChange={(date) => setStartDate(date)}\r\n            placeholderText=\"Start Date (can be blank)\"\r\n          />\r\n        </div>\r\n        <p />\r\n        <input\r\n          type=\"checkbox\"\r\n          value=\"skewNormal\"\r\n          checked={isChecked}\r\n          onChange={toggleCheckboxChange}\r\n        />{\" \"}\r\n        Use Skew-Normal\r\n        <p />\r\n        <button onClick={importCSV}>RUN!</button>\r\n        <p />\r\n        <div>\r\n          <button onClick={onButtonClick}>Run Test</button>\r\n          {showComponent && test(monteCarloResult)}\r\n        </div>\r\n      <div>\r\n        <Chart\r\n         data={{\r\n          data: data,\r\n          simulationDate: simulationDate,\r\n          startDate: startDate,\r\n          isChecked: isChecked,\r\n          leadTimeOverride: leadTimeOverride,\r\n          backlogOverride: backlogOverride\r\n         }} //TODO: Fix this\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction DatePickerStartDate(props) {\r\n  const { startDate, setStartDate } = props;\r\n\r\n  return (\r\n    <DatePicker\r\n      selected={startDate}\r\n      onChange={(date) => setStartDate(date)}\r\n      placeholderText=\"Start Date (can be blank)\"\r\n    />\r\n  );\r\n}\r\n\r\nfunction exportToJson(exportObj, name) {\r\n  const dataStr =\r\n    \"data:text/json;charset=utf-8,\" +\r\n    encodeURIComponent(JSON.stringify(exportObj));\r\n  const downloadAnchorNode = document.createElement(\"a\");\r\n  downloadAnchorNode.setAttribute(\"href\", dataStr);\r\n  downloadAnchorNode.setAttribute(\"download\", name + \".json\");\r\n  document.body.appendChild(downloadAnchorNode); // required for firefox\r\n  downloadAnchorNode.click();\r\n  downloadAnchorNode.remove();\r\n}\r\n\r\nfunction test(monteCarloResult) {\r\n  let jsonFileArray = [\r\n    IAM,\r\n    CEREBRAL,\r\n    Usability,\r\n    MarkAsCorrect,\r\n    ResourceManagement,\r\n    SSBlackline,\r\n  ];\r\n  const elements = jsonFileArray.map((jsonFile) => (\r\n    <Chart data={jsonFile} monteCarloResult={monteCarloResult} />\r\n  ));\r\n\r\n  return (\r\n    <table>\r\n      <tr>\r\n        <th colspan=\"2\"></th>\r\n        <th colspan=\"3\">Three Tickets Done</th>\r\n        <th colspan=\"3\">Six Tickets Done</th>\r\n        <th colspan=\"3\">Eleven Tickets Done</th>\r\n        <th colspan=\"3\">25% Done</th>\r\n        <th colspan=\"3\">50% Done</th>\r\n        <th colspan=\"3\">75% Done</th>\r\n      </tr>\r\n      <tr>\r\n        <th>Project</th>\r\n        <th>Completion Date</th>\r\n        <th>Today</th>\r\n        <th>Normal</th>\r\n        <th>Skew</th>\r\n        <th>Today</th>\r\n        <th>Normal</th>\r\n        <th>Skew</th>\r\n        <th>Today</th>\r\n        <th>Normal</th>\r\n        <th>Skew</th>\r\n        <th>Today</th>\r\n        <th>Normal</th>\r\n        <th>Skew</th>\r\n        <th>Today</th>\r\n        <th>Normal</th>\r\n        <th>Skew</th>\r\n        <th>Today</th>\r\n        <th>Normal</th>\r\n        <th>Skew</th>\r\n      </tr>\r\n      {elements}\r\n    </table>\r\n  );\r\n}\r\n\r\nexport default FileReader;\r\n","B:\\Documents\\JSStuff\\project-predictor\\src\\Dashboard.js",["66","67"],"import React, { useState } from \"react\";\r\nimport Papa from \"papaparse\";\r\nimport clsx from \"clsx\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport { monteCarloFunction } from \"./monteCarlo\";\r\nimport CumulativeFlowDiagram from \"./CumulativeFlowDiagram\";\r\nimport MonteCarloFrequenctDiagram from \"./MonteCarloFrequencyDiagram\";\r\nimport MonteCarloConfidenceValues from \"./MonteCarloConfidenceValues\";\r\nimport { Input } from \"@material-ui/core\";\r\nimport LeadTimeFrequencyDiagram from \"./LeadTimeFrequencyDiagram\";\r\nimport LeadTimeConfidenceValues from \"./LeadTimeConfidenceValues\";\r\nimport LeadTimeRandomFrequencyDiagram from \"./LeadTimeRandomFrequencyDiagram\";\r\n\r\nconst drawerWidth = 300;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24, // keep right padding when drawer closed\r\n    height: \"10%\",\r\n  },\r\n  toolbarIcon: {\r\n    height: \"10%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-end\",\r\n    padding: \"0 8px\",\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    height: \"10%\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    background: \"#26a69a\",\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: -36,\r\n  },\r\n  menuButtonHidden: {\r\n    display: \"none\",\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    position: \"relative\",\r\n    whiteSpace: \"nowrap\",\r\n    width: drawerWidth,\r\n    height: \"100%\",\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: \"hidden\",\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: 0,\r\n  },\r\n  drawerContainer: {\r\n    padding: theme.spacing(2),\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n    height: \"30%\",\r\n  },\r\n  drawerLowerContainer: {\r\n    padding: theme.spacing(2),\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n    height: \"45%\",\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    height: \"100vh\",\r\n    overflow: \"auto\",\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n  },\r\n  fixedHeight: {\r\n    height: \"500px\",\r\n  },\r\n  textField: {\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  overrideField: {\r\n    height: \"91%\",\r\n  },\r\n  runButton: {\r\n    height: \"15%\",\r\n    background: \"#26a69a\",\r\n  },\r\n}));\r\n\r\nexport default function Dashboard() {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(true);\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n    resize();\r\n  };\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n    resize();\r\n  };\r\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n  const [simulationDate, setSimulationDate] = useState(\r\n    new Date(new Date().getTime() - new Date().getTimezoneOffset() * 60000)\r\n      .toISOString()\r\n      .split(\"T\")[0]\r\n  );\r\n  const [csvFile, setCsvFile] = useState();\r\n  const [startDate, setStartDate] = useState();\r\n  const [data, setData] = useState();\r\n  const [dist, setDist] = useState(\"Normal\");\r\n  const [monteResults, setMonteResults] = useState();\r\n  const [leadTimeOverride, setLeadTimeOverride] = useState();\r\n  const [backlogOverride, setBackLogOverride] = useState();\r\n  const [workInParrallelOverride, setWorkInParrallelOverride] = useState();\r\n  const [leadTimeMaxValueOverride, setLeadTimeMaxValueOverride] = useState();\r\n  const handleChange = (event) => setCsvFile(event.target.files[0]);\r\n  const handleSimulationStartDateChange = (event) =>\r\n    setSimulationDate(event.target.value);\r\n  const handleStartDateChange = (event) => setStartDate(event.target.value);\r\n  const handleLeadTimeOverrideChange = (event) =>\r\n    setLeadTimeOverride(event.target.value);\r\n  const updateData = (result) => {\r\n    setData(result.data);\r\n    setMonteResults(\r\n      monteCarloFunction({\r\n        data: {\r\n          data: result.data,\r\n          simulationDate: simulationDate,\r\n          startDate: startDate,\r\n          distribution: dist,\r\n          leadTimeOverride: leadTimeOverride,\r\n          backlogOverride: backlogOverride,\r\n          workInParrallelOverride: workInParrallelOverride,\r\n          leadTimeMaxValueOverride: leadTimeMaxValueOverride,\r\n        },\r\n      })\r\n    );\r\n  };\r\n  const importCSV = () =>\r\n    Papa.parse(csvFile, {\r\n      complete: updateData,\r\n      header: true,\r\n    });\r\n  const handleMenuChange = (event) => {\r\n    setDist(event.target.value);\r\n  };\r\n\r\n  console.log(leadTimeMaxValueOverride);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar\r\n        position=\"absolute\"\r\n        className={clsx(classes.appBar, open && classes.appBarShift)}\r\n      >\r\n        <Toolbar className={classes.toolbar}>\r\n            <IconButton\r\n              edge=\"start\"\r\n              color=\"inherit\"\r\n              aria-label=\"open drawer\"\r\n              onClick={handleDrawerOpen}\r\n              className={clsx(\r\n                classes.menuButton,\r\n                open && classes.menuButtonHidden\r\n              )}\r\n            >\r\n              <ChevronRightIcon />\r\n            </IconButton>\r\n          <Typography\r\n            component=\"h1\"\r\n            variant=\"h6\"\r\n            color=\"inherit\"\r\n            noWrap\r\n            className={classes.title}\r\n          >\r\n            Monte Carlo Simulation\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer\r\n        variant=\"permanent\"\r\n        classes={{\r\n          paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n        }}\r\n        open={open}\r\n      >\r\n        <div className={classes.toolbarIcon}>\r\n          <IconButton onClick={handleDrawerClose}>\r\n            <ChevronLeftIcon />\r\n          </IconButton>\r\n        </div>\r\n        <Divider />\r\n        <div className={classes.drawerContainer}>\r\n          <InputLabel htmlFor=\"import-button\">\r\n            <Input\r\n              className={classes.textField}\r\n              inputProps={{\r\n                accept: \".csv\",\r\n              }}\r\n              onChange={handleChange}\r\n              style={{ hidden: { display: \"none\" } }}\r\n              type=\"file\"\r\n              disableUnderline={true}\r\n            />\r\n          </InputLabel>\r\n          <TextField\r\n            id=\"date\"\r\n            label=\"Simulation Start Date (today)\"\r\n            type=\"date\"\r\n            defaultValue={simulationDate}\r\n            onChange={handleSimulationStartDateChange}\r\n            className={classes.textField}\r\n            InputLabelProps={{\r\n              shrink: true,\r\n            }}\r\n            variant=\"outlined\"\r\n          />\r\n          <FormControl variant=\"outlined\" className={classes.textField}>\r\n            <InputLabel>Distribution Type</InputLabel>\r\n            <Select\r\n              labelId=\"demo-simple-select-outlined-label\"\r\n              id=\"demo-simple-select-outlined\"\r\n              value={dist}\r\n              onChange={handleMenuChange}\r\n              label=\"Distribution Type\"\r\n            >\r\n              <MenuItem value={\"Normal\"}>Normal</MenuItem>\r\n              <MenuItem value={\"Skew-Normal\"}>Skew-Normal</MenuItem>\r\n              <MenuItem value={\"Log-Normal\"}>Log-Normal</MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n        </div>\r\n        <Divider className={classes.textField} />\r\n        <div className={classes.drawerLowerContainer}>\r\n          <TextField\r\n            id=\"date\"\r\n            label=\"Project Start Date\"\r\n            type=\"date\"\r\n            variant=\"outlined\"\r\n            onChange={handleStartDateChange}\r\n            className={classes.overrideField}\r\n            InputLabelProps={{\r\n              shrink: true,\r\n            }}\r\n          />\r\n          <TextField\r\n            error={\r\n              leadTimeOverride\r\n                ? !/^\\d+(?:,\\d+)*$|^$/.test(leadTimeOverride)\r\n                : false\r\n            }\r\n            id=\"outlined-basic\"\r\n            label=\"Lead Time\"\r\n            variant=\"outlined\"\r\n            onChange={handleLeadTimeOverrideChange}\r\n            className={classes.overrideField}\r\n          />\r\n          <TextField\r\n            error={\r\n              backlogOverride ? !/^[1-9]\\d*$|^$/.test(backlogOverride) : false\r\n            }\r\n            id=\"outlined-basic\"\r\n            label=\"Backlog\"\r\n            variant=\"outlined\"\r\n            onChange={(event) => setBackLogOverride(event.target.value)}\r\n            className={classes.overrideField}\r\n          />\r\n          <TextField\r\n            id=\"outlined-basic\"\r\n            label=\"Work In Parallel\"\r\n            variant=\"outlined\"\r\n            onChange={(event) => setWorkInParrallelOverride(event.target.value)}\r\n            className={classes.overrideField}\r\n          />\r\n          <TextField\r\n            id=\"outlined-basic\"\r\n            label=\"Lead Time Max Value\"\r\n            variant=\"outlined\"\r\n            onChange={(event) =>\r\n              setLeadTimeMaxValueOverride(event.target.value)\r\n            }\r\n            className={classes.overrideField}\r\n          />\r\n        </div>\r\n        <Button\r\n          disabled={dist && simulationDate && csvFile ? false : true}\r\n          variant=\"contained\"\r\n          color=\"inherit\"\r\n          onClick={importCSV}\r\n          className={classes.runButton}\r\n        >\r\n          <Typography\r\n            component=\"h1\"\r\n            variant=\"h6\"\r\n            color=\"primary\"\r\n            noWrap\r\n            className={classes.title}\r\n          >\r\n            Run\r\n          </Typography>\r\n        </Button>\r\n      </Drawer>\r\n      <main className={classes.content}>\r\n        <div className={classes.appBarSpacer} />\r\n\r\n        <Chartidge data={monteResults} />\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Chartidge(props) {\r\n  const classes = useStyles();\r\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n  if (props.data) {\r\n    return (\r\n      <Container maxWidth=\"lg\" className={classes.container}>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12}>\r\n            <Paper className={fixedHeightPaper}>\r\n              <CumulativeFlowDiagram data={props.data} />\r\n            </Paper>\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <Paper className={fixedHeightPaper}>\r\n              <MonteCarloConfidenceValues data={props.data} />\r\n            </Paper>\r\n          </Grid>\r\n          <Grid item xs={9}>\r\n            <Paper className={fixedHeightPaper}>\r\n              <MonteCarloFrequenctDiagram data={props.data} />\r\n            </Paper>\r\n          </Grid>\r\n          <Grid item xs={2}>\r\n            <Paper className={fixedHeightPaper}>\r\n              <LeadTimeConfidenceValues data={props.data} />\r\n            </Paper>\r\n          </Grid>\r\n          <Grid item xs={5}>\r\n            <Paper className={fixedHeightPaper}>\r\n              <LeadTimeFrequencyDiagram data={props.data} />\r\n            </Paper>\r\n          </Grid>\r\n          <Grid item xs={5}>\r\n            <Paper className={fixedHeightPaper}>\r\n              <LeadTimeRandomFrequencyDiagram data={props.data} />\r\n            </Paper>\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n    );\r\n  } else {\r\n    return (\r\n      <Container maxWidth=\"lg\" className={classes.container}>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12}>\r\n            <p>Documentation</p>\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\n//trick the plots into resizing when the drawer is opened or closed\r\nconst delay = (ms) => new Promise((res) => setTimeout(res, ms));\r\nconst resize = async () => {\r\n  await delay(300);\r\n  window.dispatchEvent(new Event(\"resize\"));\r\n};\r\n","B:\\Documents\\JSStuff\\project-predictor\\src\\Chart.js",["68","69","70","71","72"],"import React from 'react';\r\nimport Plot from 'react-plotly.js';\r\nimport skewnorm from 'skew-normal-random';\r\n\r\nvar createdDate = 'Created';\r\nconst leadTimeMaxValue = 15;\r\n\r\nfunction dateChange(data) {\r\n    let data3 = data.map(datastring => {\r\n        datastring['Lead Time'] = calcBusinessDays(new Date(datastring['In Progress']), new Date(datastring['Merged']));\r\n        datastring['In Progress'] = new Date(datastring['In Progress']);\r\n        datastring[createdDate] = new Date(datastring[createdDate]);\r\n        datastring['Merged'] = new Date(datastring['Merged']);\r\n        datastring['Closed'] = new Date(datastring['Closed']);\r\n        return datastring;\r\n    })\r\n    return data3;\r\n}\r\n\r\nfunction removeNotWorkedTickets(data) {\r\n    let newArr = [];\r\n    for (var i = 0; i < data.length; i++) {\r\n        if (!isValidDate(data[i].Closed) || (isValidDate(data[i].Closed) && isValidDate(data[i].Merged))) {\r\n            newArr.push(data[i]);\r\n        }\r\n    }\r\n    return newArr;\r\n}\r\n\r\nfunction calcBusinessDays(dDate1, dDate2) {         // input given as Date objects\r\n\r\n    var iWeeks, iDateDiff, iAdjust = 0;\r\n\r\n    if (dDate2 < dDate1) return -1;                 // error code if dates transposed\r\n\r\n    var iWeekday1 = dDate1.getDay();                // day of week\r\n    var iWeekday2 = dDate2.getDay();\r\n\r\n    iWeekday1 = (iWeekday1 == 0) ? 7 : iWeekday1;   // change Sunday from 0 to 7\r\n    iWeekday2 = (iWeekday2 == 0) ? 7 : iWeekday2;\r\n\r\n    if ((iWeekday1 > 5) && (iWeekday2 > 5)) iAdjust = 1;  // adjustment if both days on weekend\r\n\r\n    iWeekday1 = (iWeekday1 > 5) ? 5 : iWeekday1;    // only count weekdays\r\n    iWeekday2 = (iWeekday2 > 5) ? 5 : iWeekday2;\r\n\r\n    // calculate differnece in weeks (1000mS * 60sec * 60min * 24hrs * 7 days = 604800000)\r\n    iWeeks = Math.floor((dDate2.getTime() - dDate1.getTime()) / 604800000)\r\n\r\n    if (iWeekday1 <= iWeekday2) {\r\n        iDateDiff = (iWeeks * 5) + (iWeekday2 - iWeekday1)\r\n    } else {\r\n        iDateDiff = ((iWeeks + 1) * 5) - (iWeekday1 - iWeekday2)\r\n    }\r\n\r\n    iDateDiff -= iAdjust                            // take into account both days on weekend\r\n\r\n    return (iDateDiff + 1);                         // add 1 because dates are inclusive\r\n\r\n}\r\n\r\nfunction findEarliestDate(dateArray, startDate) {\r\n    var minIdx = 0, maxIdx = 0;\r\n    for (var i = 0; i < dateArray.length; i++) {\r\n        if (isValidDate(dateArray[i]['In Progress']) && isValidDate(dateArray[minIdx]['In Progress'])) {\r\n            if (dateArray[i]['In Progress'] > dateArray[maxIdx]['In Progress']) maxIdx = i;\r\n            if (dateArray[i]['In Progress'] < dateArray[minIdx]['In Progress']) minIdx = i;\r\n        }\r\n        if (isValidDate(dateArray[i]['In Progress']) && isValidDate(dateArray[minIdx]['In Progress']) == false) minIdx = i;\r\n    }\r\n    if (!startDate) {\r\n        return new Date(dateArray[minIdx]['In Progress']);\r\n    } else {\r\n        return startDate;\r\n    }\r\n}\r\n\r\nfunction isValidDate(date) {\r\n    return date && Object.prototype.toString.call(date) === \"[object Date]\" && !isNaN(date);\r\n}\r\n\r\nfunction createDateArray(array, today, minimum) {\r\n    var graphXAxisNum = Math.floor(today.getTime() - minimum.getTime()) / 86400000;\r\n    var xaxis = [];\r\n    for (var j = 0; j < graphXAxisNum; j++) {\r\n        let day = {\r\n            \"Day\": addDays(minimum, j),\r\n            \"Backlog\": getBacklogAndWorkDone(addDays(minimum, j), array, createdDate),\r\n            \"Work_Done\": getBacklogAndWorkDone(addDays(minimum, j), array, 'Merged'),\r\n            \"Work_Added\": getBacklogAndWorkDone(addDays(minimum, j), array, createdDate) - getBacklogAndWorkDone(addDays(minimum, j - 1), array, createdDate),\r\n        }\r\n        xaxis[j] = day;\r\n    }\r\n    return xaxis;\r\n}\r\n\r\nfunction addDays(date, days) {\r\n    var result = new Date(date);\r\n    result.setDate(result.getDate() + days);\r\n    return result;\r\n}\r\n\r\nfunction getBacklogAndWorkDone(date, array, key) {\r\n    let count = 0;\r\n    for (var j = 0; j < array.length; j++) {\r\n        if (isValidDate(date) && isValidDate(array[j][key])) {\r\n            if (date.getTime() > array[j][key].getTime()) {\r\n                count++;\r\n            }\r\n        }\r\n    }\r\n    return count;\r\n}\r\n\r\n\r\nfunction computeMeanSdAndItervalRangeMinMax(list) {\r\n    const sum = list.reduce((a, b) => a + b, 0);\r\n    const mean = list.reduce((a, b) => a + b) / list.length;\r\n    const sumMinusMean = list.reduce((a, b) => a + (b - mean) * (b - mean), 0);\r\n\r\n    return {\r\n        mean: mean,\r\n        sd: Math.sqrt(sumMinusMean / (list.length - 1)),\r\n        mode: median(mode(list)),\r\n        median: median(list),\r\n        range: [Math.min(...list), Math.max(...list)],\r\n        best_case: mean - 2 * (Math.sqrt(sumMinusMean / (list.length - 1))),\r\n        worst_case: mean + 2 * (Math.sqrt(sumMinusMean / (list.length - 1)))\r\n    };\r\n}\r\n\r\nfunction mode(numbers) {\r\n    // as result can be bimodal or multi-modal,\r\n    // the returned result is provided as an array\r\n    // mode of [3, 5, 4, 4, 1, 1, 2, 3] = [1, 3, 4]\r\n    var modes = [], count = [], i, number, maxIndex = 0, result = [];\r\n    for (let i = 0; i < numbers.length; i++) {\r\n        let rand_num = numbers[i];\r\n        let rounded = round_to_precision(rand_num, 1)\r\n        result.push(rounded);\r\n    }\r\n\r\n    for (i = 0; i < result.length; i += 1) {\r\n        number = result[i];\r\n        count[number] = (count[number] || 0) + 1;\r\n        if (count[number] > maxIndex) {\r\n            maxIndex = count[number];\r\n        }\r\n    }\r\n\r\n    for (i in count)\r\n        if (count.hasOwnProperty(i)) {\r\n            if (count[i] === maxIndex) {\r\n                modes.push(Number(i));\r\n            }\r\n        }\r\n\r\n    return modes;\r\n}\r\n\r\nfunction median(numbers) {\r\n    // median of [3, 5, 4, 4, 1, 1, 2, 3] = 3\r\n    var median = 0, numsLen = numbers.length;\r\n    numbers.sort((a, b) => a - b);\r\n\r\n    if (\r\n        numsLen % 2 === 0 // is even\r\n    ) {\r\n        // average of two middle numbers\r\n        median = (numbers[numsLen / 2 - 1] + numbers[numsLen / 2]) / 2;\r\n    } else { // is odd\r\n        // middle number only\r\n        median = numbers[(numsLen - 1) / 2];\r\n    }\r\n    return median;\r\n}\r\n\r\n//get the last ll tickets worked to completion\r\n//TODO: Make it so last 11 tickets respect start date\r\nfunction lastElevenTickets(array, today) {\r\n    var temp = array.slice().sort((a, b) => b['Merged'] - a['Merged']);\r\n\r\n    let l = 0;\r\n    let testarr = [];\r\n\r\n    for (var k = 0; k < temp.length; k++) {\r\n        if (l >= 11) break;\r\n        if (isValidDate(temp[k]['Merged']) && temp[k]['Merged'] < today && temp[k]['Lead Time'] < leadTimeMaxValue) {\r\n            testarr.push(temp[k]);\r\n            l = l + 1;\r\n        }\r\n    }\r\n    //mostRecentElevenTicketsArray = testarr\r\n    return testarr;\r\n}\r\n\r\n\r\nfunction workInParrallel(array, today) {\r\n    let dateRange = [];\r\n    const lastDay = {\r\n        date: today,\r\n        in_progress: false,\r\n        merged: false,\r\n        last_day: true\r\n    };\r\n    for (var i = 0; i < array.length; i++) {\r\n        if (isValidDate(array[i]['In Progress']) && isValidDate(array[i]['Merged'])) {\r\n            const toadd = [{\r\n                date: array[i]['In Progress'],\r\n                in_progress: true,\r\n                merged: false,\r\n                last_day: false\r\n            }, {\r\n                date: array[i]['Merged'],\r\n                in_progress: false,\r\n                merged: true,\r\n                last_day: false\r\n            }];\r\n            dateRange = dateRange.concat(toadd);\r\n        }\r\n        if (isValidDate(array[i]['In Progress']) && !isValidDate(array[i]['Merged'])) {\r\n            dateRange = dateRange.concat({\r\n                date: array[i]['In Progress'],\r\n                in_progress: true,\r\n                merged: false,\r\n                last_day: false\r\n            });\r\n        }\r\n        if (array[i]['In Prgress'] >= today) break;\r\n    }\r\n    dateRange = dateRange.concat(lastDay);\r\n    //[0] earliest date -> [n] last date\r\n    var filteredDateRange = dateRange.slice().sort((a, b) => a.date - b.date);\r\n    if (!filteredDateRange[0].in_progress) console.error(\"something is wrong with this csv, the first item has a merged date before the in progress date\");\r\n    let multiplyer = 1;\r\n    let sum = 0;\r\n    for (var j = 0; j < filteredDateRange.length - 1; j++) {\r\n\r\n        sum = sum + ((filteredDateRange[j + 1].date.getTime() - filteredDateRange[j].date.getTime()) * multiplyer);\r\n        if (filteredDateRange[j + 1].in_progress) {\r\n            multiplyer++;\r\n        }\r\n        if (filteredDateRange[j + 1].merged) {\r\n            multiplyer--;\r\n        }\r\n        if (filteredDateRange[j + 1].last_day) {\r\n            break;\r\n        }\r\n    }\r\n    let total = today.getTime() - filteredDateRange[0].date.getTime();\r\n    let workInParrallelValue = sum / total;\r\n\r\n    return workInParrallelValue;\r\n\r\n}\r\n\r\n\r\nfunction randNumFromDistribution(rangeObject, distributionType) {\r\n\r\n    let n = 10000;\r\n    let temparray = [];\r\n\r\n\r\n    const randn_bm = () => {\r\n        var u = 0, v = 0;\r\n        while (u === 0) u = Math.random(); //Converting [0,1) to (0,1)\r\n        while (v === 0) v = Math.random();\r\n        const R = Math.sqrt(-2.0 * Math.log(u));\r\n        const Θ = 2.0 * Math.PI * v;\r\n        const test = [R * Math.cos(Θ), R * Math.sin(Θ)];\r\n\r\n        const mean = rangeObject.mean;\r\n        const ω = rangeObject.sd;\r\n        //Pearson's first skewness coefficient (mode skewness)\r\n        const α = (rangeObject.mean - rangeObject.mode) / ω;\r\n        const 𝛿 = α / Math.sqrt(1 + α * α);\r\n        const ξ = rangeObject.mean - ω * 𝛿 * Math.sqrt(2 / Math.PI);\r\n        const med = rangeObject.median;\r\n\r\n        function randomNormal(ξ, ω, median) {\r\n            let num = Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);\r\n            num = num * ω + median;\r\n            if ((num - median) / ω > 3) return randn_bm(); // remove outliers more than 3 standard deviations away from median\r\n            return num;\r\n        }\r\n\r\n        // function randomSkewNormal(test, ξ, ω, α = 7) {\r\n        //     const [u0, v] = test;\r\n        //     if (α === 0) {\r\n        //         return ξ + ω * u0;\r\n        //     }\r\n        //     const 𝛿 = α / Math.sqrt(1 + α * α);\r\n        //     const u1 = 𝛿 * u0 + Math.sqrt(1 - 𝛿 * 𝛿) * v;\r\n        //     //const z = u0 >= 0 ? u1 : -u1;\r\n        //     const z = u1;\r\n        //     //origin was ξ + ω * z\r\n        //     let num = ξ + ω * z;\r\n        //     //if (num < 0) num = randn_bm();\r\n        //     return num;\r\n        // }\r\n\r\n        function randomSkewNormal(alpha, location, scale) {\r\n            let num = skewnorm.rSkewNorm(alpha, location, scale);\r\n            return num;\r\n        }\r\n\r\n\r\n        if (distributionType) {\r\n            return randomSkewNormal(α, ξ, ω);\r\n        } else {\r\n            return randomNormal(mean, ω, med)\r\n        }\r\n\r\n    }\r\n\r\n\r\n    // Create n samples between min and max\r\n    for (let i = 0; i < n; i++) {\r\n        let rand_num = randn_bm();\r\n        temparray.push(rand_num);\r\n    }\r\n\r\n    return temparray;\r\n}\r\n\r\nfunction monteCarlo(dates, randomNumsLeadTime, randomNumsWorkAdded, today, formattedData) {\r\n    let workLeft = dates[dates.length - 1].Backlog - dates[dates.length - 1].Work_Done;\r\n    let adjustedWorkLeft = workLeft / workInParrallel(lastElevenTickets(formattedData, today), today);\r\n    let sum = randomNumsLeadTime[Math.floor(Math.random() * randomNumsLeadTime.length)] * adjustedWorkLeft;\r\n    if (sum < 0) sum = 0;\r\n    \r\n    return sum //* (1 + randomNumsWorkAdded[Math.floor(Math.random() * randomNumsWorkAdded.length)]);\r\n}\r\n\r\nfunction runMonteCarlo(n, dates, randomNumsLeadTime, randomNumsWorkAdded, today, formattedData) {\r\n    let runArray = [];\r\n    for (let i = 0; i < n; i++) {\r\n        runArray.push(monteCarlo(dates, randomNumsLeadTime, randomNumsWorkAdded, today, formattedData));\r\n    }\r\n    let monteCarloResults = {\r\n        daysToCompletionArray: runArray,\r\n        finalDistributionValuies: computeMeanSdAndItervalRangeMinMax(runArray),\r\n        workInParrallelValue: workInParrallel(lastElevenTickets(formattedData, today), today),\r\n        randomWorkAdded: computeMeanSdAndItervalRangeMinMax(randomNumsWorkAdded),\r\n        confidence: getConfidence(runArray),\r\n        bestAndWorstCaseForPlotObject: bestAndWorstCaseForPlot(dates, computeMeanSdAndItervalRangeMinMax(runArray), computeMeanSdAndItervalRangeMinMax(randomNumsWorkAdded), getConfidence(runArray))\r\n\r\n    };\r\n    console.log(monteCarloResults);\r\n    return monteCarloResults;\r\n}\r\n\r\nconst round_to_precision = (x, precision) => {\r\n    var y = +x + (precision === undefined ? 0.5 : precision / 2);\r\n    return y - (y % (precision === undefined ? 1 : +precision));\r\n}\r\n\r\nfunction getConfidence(rawDataArray) {\r\n    let result = [];\r\n\r\n    for (let j = 0; j < Math.max(...rawDataArray); j++) {\r\n        result[j] = 0;\r\n    }\r\n\r\n    for (let i = 0; i < rawDataArray.length; i++) {\r\n        let rand_num = rawDataArray[i];\r\n        let rounded = round_to_precision(rand_num, 1)\r\n        result[rounded] += 1;\r\n    }\r\n\r\n    let hc_data = [];\r\n    for (const [key, val] of Object.entries(result)) {\r\n        hc_data.push({ \"x\": parseFloat(key), \"y\": val / rawDataArray.length });\r\n    }\r\n\r\n    // Sort\r\n    hc_data = hc_data.sort(function (a, b) {\r\n        if (a.x < b.x) return -1;\r\n        if (a.x > b.x) return 1;\r\n        return 0;\r\n    });\r\n\r\n    //TODO: use hc_data as a way to create a custom frequency distribution\r\n    let sum = 0;\r\n    let confidence = [\r\n        { percent: 50, value: undefined },\r\n        { percent: 75, value: undefined },\r\n        { percent: 90, value: undefined },\r\n        { percent: 95, value: undefined },\r\n        { percent: 99, value: undefined }\r\n    ];\r\n    for (let k = 0; k < hc_data.length; k++) {\r\n        sum = sum + hc_data[k].y * 100;\r\n        for (let l = 0; l < confidence.length; l++) {\r\n            if (sum < confidence[l].percent) {\r\n                confidence[l].value = hc_data[k].x + 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    return confidence;\r\n}\r\n\r\nfunction bestAndWorstCaseForPlot(historicalData, finalDistributionValuies, randomWorkAdded, confidence) {\r\n\r\n    let lastDay = historicalData[historicalData.length - 1].Day.getTime() / 86400000;\r\n    let lastDayBacklogTotal = historicalData[historicalData.length - 1].Backlog;\r\n    let lastDayDoneTotal = historicalData[historicalData.length - 1].Work_Done;\r\n    let worstCaseDays = confidence[3].value;\r\n    let bestCaseDays = confidence[0].value;\r\n    let averageWorkAdded = randomWorkAdded.median;\r\n    let resultArray = [];\r\n    for (let i = 0; i < worstCaseDays; i++) {\r\n        const date = new Date((i + lastDay) * 86400000), bckLgInc = averageWorkAdded * i + lastDayBacklogTotal, doneWC = (i * (((averageWorkAdded * worstCaseDays) + lastDayBacklogTotal) - lastDayDoneTotal) / worstCaseDays) + lastDayDoneTotal, doneBC = (i * (((averageWorkAdded * bestCaseDays) + lastDayBacklogTotal) - lastDayDoneTotal) / bestCaseDays) + lastDayDoneTotal;\r\n        if (doneBC > lastDayBacklogTotal) {\r\n            resultArray.push(\r\n                {\r\n                    day: date,\r\n                    backlogIncrease: bckLgInc,\r\n                    doneWorstCase: doneWC\r\n                }\r\n            );\r\n        } else {\r\n            resultArray.push(\r\n                {\r\n                    day: date,\r\n                    backlogIncrease: bckLgInc,\r\n                    doneWorstCase: doneWC,\r\n                    doneBestCase: doneBC\r\n                }\r\n            )\r\n        }\r\n    }\r\n    return resultArray;\r\n}\r\n\r\n\r\nfunction formatDate(date) {\r\n    if (!isValidDate(date)){\r\n        return null\r\n    } else {\r\n    var d = new Date(date),\r\n        month = '' + (d.getMonth() + 1),\r\n        day = '' + d.getDate(),\r\n        year = d.getFullYear();\r\n\r\n    if (month.length < 2) \r\n        month = '0' + month;\r\n    if (day.length < 2) \r\n        day = '0' + day;\r\n\r\n    return [year, month, day].join('-');\r\n    }\r\n}\r\n\r\nfunction test(startDate, today, formattedData, distType) {\r\n    let randomArr = randNumFromDistribution(computeMeanSdAndItervalRangeMinMax(lastElevenTickets(formattedData, today).map(o => o['Lead Time'])), distType);\r\n    return runMonteCarlo(10000, createDateArray(formattedData, today, findEarliestDate(formattedData, startDate)), randomArr, createDateArray(formattedData, today, findEarliestDate(formattedData, startDate)).map(o => o.Work_Added), today, formattedData)\r\n}\r\n\r\n\r\nfunction Chart(props) {\r\n    console.log(props);\r\n    let today = new Date(props.data.today);\r\n    const distType = props.data.isChecked;\r\n    let startDate = props.data.startDate == null ? false : new Date(props.data.startDate);\r\n    const formattedData = removeNotWorkedTickets(dateChange(props.data.data));\r\n    console.log(formattedData)\r\n\r\n    if (!props.data.isTest) {\r\n    let forplot = createDateArray(formattedData, today, findEarliestDate(formattedData, startDate));\r\n    const lastElevenData = computeMeanSdAndItervalRangeMinMax(lastElevenTickets(formattedData, today).map(o => o['Lead Time']));\r\n    const randLastElevenData = computeMeanSdAndItervalRangeMinMax(randNumFromDistribution(lastElevenData), distType);\r\n    const historicalLastElevenTickets = computeMeanSdAndItervalRangeMinMax(lastElevenTickets(formattedData, today).map(o => o['Lead Time']));\r\n    const workAdded = computeMeanSdAndItervalRangeMinMax(forplot.map(o => o.Work_Added));\r\n    const randWorkadded = computeMeanSdAndItervalRangeMinMax(randNumFromDistribution(workAdded));\r\n    let myBoyMonte = runMonteCarlo(10000, forplot, randNumFromDistribution(computeMeanSdAndItervalRangeMinMax(lastElevenTickets(formattedData, today).map(o => o['Lead Time'])), distType), forplot.map(o => o.Work_Added), today, formattedData);\r\n\r\n    \r\n        return (\r\n\r\n            <div className=\"center\">\r\n                <div className=\"container\">\r\n                    <Plot\r\n                        data={[\r\n                            //backlog\r\n                            {\r\n                                x: forplot.map(o => o.Day),\r\n                                y: forplot.map(o => o.Backlog),\r\n                                type: 'scatter',\r\n                                mode: 'lines',\r\n                                marker: { color: 'orange' },\r\n                            },\r\n                            //work done\r\n                            {\r\n                                x: forplot.map(o => o.Day),\r\n                                y: forplot.map(o => o.Work_Done),\r\n                                type: 'scatter',\r\n                                mode: 'lines',\r\n                                marker: { color: 'blue' },\r\n                            },\r\n                            {\r\n                                x: myBoyMonte.bestAndWorstCaseForPlotObject.map(o => o.day),\r\n                                y: myBoyMonte.bestAndWorstCaseForPlotObject.map(o => o.backlogIncrease),\r\n                                type: 'scatter',\r\n                                mode: 'lines',\r\n                                marker: { color: 'pink' },\r\n                            },\r\n                            {\r\n                                x: myBoyMonte.bestAndWorstCaseForPlotObject.map(o => o.day),\r\n                                y: myBoyMonte.bestAndWorstCaseForPlotObject.map(o => o.doneWorstCase),\r\n                                type: 'scatter',\r\n                                mode: 'lines',\r\n                                marker: { color: 'red' },\r\n                            },\r\n                            {\r\n                                x: myBoyMonte.bestAndWorstCaseForPlotObject.map(o => o.day),\r\n                                y: myBoyMonte.bestAndWorstCaseForPlotObject.map(o => o.doneBestCase),\r\n                                type: 'scatter',\r\n                                mode: 'lines',\r\n                                marker: { color: 'green' },\r\n                            },\r\n                        ]}\r\n                        layout={{ width: 1000, height: 500, title: 'CFD' }}\r\n                    />\r\n                </div>\r\n                <div className=\"container\">\r\n                    <div className=\"dataBox\">\r\n                        <h1>Monte Carlo Data</h1>\r\n                        <h3>Confidence Values</h3>\r\n                        <p>50%: {myBoyMonte.confidence[0].value} days</p>\r\n                        <p>75%: {myBoyMonte.confidence[1].value} days</p>\r\n                        <p>90%: {myBoyMonte.confidence[2].value} days</p>\r\n                        <p>95%: {myBoyMonte.confidence[3].value} days</p>\r\n                        <h3>Model Values</h3>\r\n                        <p>Mean: {Math.round(myBoyMonte.finalDistributionValuies.mean * 100) / 100}</p>\r\n                        <p>Median: {Math.round(myBoyMonte.finalDistributionValuies.median * 100) / 100}</p>\r\n                        <p>Std Dev: {Math.round(myBoyMonte.finalDistributionValuies.sd * 100) / 100}</p>\r\n                        <p>Mode: {myBoyMonte.finalDistributionValuies.mode}</p>\r\n                        <p>Work in parallel value: {Math.round(myBoyMonte.workInParrallelValue * 100) / 100}</p>\r\n                    </div>\r\n                    <div>\r\n                        <Plot\r\n                            data={[\r\n                                //monteCarlo\r\n                                {\r\n                                    x: myBoyMonte.daysToCompletionArray,\r\n                                    type: 'histogram',\r\n                                    histnorm: 'probability',\r\n                                    marker: {\r\n                                        color: 'rgb(255,100,100)',\r\n                                    },\r\n                                },\r\n                            ]}\r\n                            layout={{ width: 1000, height: 500, title: 'Monte Carlo', xaxis: { range: [0, Math.max(myBoyMonte.daysToCompletionArray)] } }}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"container\">\r\n                    <div className=\"dataBox\">\r\n                        <h1>Lead Time</h1>\r\n                        <h3>Historical Values</h3>\r\n                        <p>{lastElevenTickets(formattedData, today).map(o => o['Lead Time']).map((o) => <>{o},</>)}</p>\r\n                        <p>Mean: {Math.round(historicalLastElevenTickets.mean * 100) / 100}</p>\r\n                        <p>Median: {Math.round(historicalLastElevenTickets.median * 100) / 100}</p>\r\n                        <p>Std Dev: {Math.round(historicalLastElevenTickets.sd * 100) / 100}</p>\r\n                        <h3>Random Values</h3>\r\n                        <p>Mean: {Math.round(randLastElevenData.mean * 100) / 100}</p>\r\n                        <p>Median: {Math.round(randLastElevenData.median * 100) / 100}</p>\r\n                        <p>Std Dev: {Math.round(randLastElevenData.sd * 100) / 100}</p>\r\n                        <p>Mode: {randLastElevenData.mode}</p>\r\n                    </div>\r\n                    <div className=\"plot\">\r\n                        <Plot\r\n                            data={[\r\n                                //backlog\r\n                                {\r\n                                    x: lastElevenTickets(formattedData, today).map(o => o['Lead Time']),\r\n                                    type: 'histogram',\r\n                                    histnorm: 'probability',\r\n                                    marker: {\r\n                                        color: 'rgb(255,255,100)',\r\n                                    },\r\n                                },\r\n                            ]}\r\n                            layout={{ width: 500, height: 500, title: 'Lead Time Frequency Diagram' }}\r\n                        />\r\n                    </div>\r\n                    <div className=\"plot\">\r\n                        <Plot\r\n                            data={[\r\n                                //backlog\r\n                                {\r\n                                    x: randNumFromDistribution(lastElevenData, distType),\r\n                                    type: 'histogram',\r\n                                    histnorm: 'probability',\r\n                                    marker: {\r\n                                        color: 'rgb(255,255,100)',\r\n                                    },\r\n                                },\r\n                            ]}\r\n                            layout={{ width: 500, height: 500, title: 'Lead Time Random Numbers' }}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"container\">\r\n                    <div className=\"dataBox\">\r\n                        <h1>Work Added</h1>\r\n                        <h3>Historical Values</h3>\r\n                        <p>Mean: {Math.round(workAdded.mean * 100) / 100}</p>\r\n                        <p>Median: {Math.round(workAdded.median * 100) / 100}</p>\r\n                        <p>Std Dev: {Math.round(workAdded.sd * 100) / 100}</p>\r\n                        <h3>Random Values</h3>\r\n                        <p>Mean: {Math.round(randWorkadded.mean * 100) / 100}</p>\r\n                        <p>Median: {Math.round(randWorkadded.median * 100) / 100}</p>\r\n                        <p>Std Dev: {Math.round(randWorkadded.sd * 100) / 100}</p>\r\n                        <p>Mode: {randWorkadded.mode}</p>\r\n                    </div>\r\n                    <div className=\"plot\">\r\n                        <Plot\r\n                            data={[\r\n                                //backlog\r\n                                {\r\n                                    x: forplot.map(o => o.Work_Added),\r\n                                    type: 'histogram',\r\n                                    histnorm: 'probability',\r\n                                    marker: {\r\n                                        color: 'rgb(255,255,100)',\r\n                                    },\r\n                                },\r\n                            ]}\r\n                            layout={{ width: 500, height: 500, title: 'Work Added Frequency Diagram' }}\r\n                        />\r\n                    </div>\r\n                    <div className=\"plot\">\r\n                        <Plot\r\n                            data={[\r\n                                //backlog\r\n                                {\r\n                                    x: randNumFromDistribution(workAdded, distType),\r\n                                    type: 'histogram',\r\n                                    histnorm: 'probability',\r\n                                    marker: {\r\n                                        color: 'rgb(255,255,100)',\r\n                                    },\r\n                                },\r\n                            ]}\r\n                            layout={{ width: 500, height: 500, title: 'Work Added Random Numbers' }}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    } else {\r\n        const earliestDate = findEarliestDate(formattedData, startDate)\r\n        const twentyFivePercentDone = ((new Date(props.data.completionDate).getTime() - findEarliestDate(formattedData, startDate).getTime()) / 4)\r\n        let tableData = {\r\n            completionDate: new Date(props.data.completionDate),\r\n            threeTix: {\r\n                today: new Date(props.data.dateAtThreeTickets),\r\n                normal: addDays(new Date(props.data.dateAtThreeTickets), (isValidDate(new Date(props.data.dateAtThreeTickets))) ? test(startDate, new Date(props.data.dateAtThreeTickets), formattedData, false).confidence[3].value : null),\r\n                skew: addDays(new Date(props.data.dateAtThreeTickets), (isValidDate(new Date(props.data.dateAtThreeTickets))) ? test(startDate, new Date(props.data.dateAtThreeTickets), formattedData, true).confidence[3].value : null)\r\n            },\r\n            sixTix: {\r\n                today: new Date(props.data.dateAtSixTickets),\r\n                normal: addDays(new Date(props.data.dateAtSixTickets), (isValidDate(new Date(props.data.dateAtSixTickets))) ? test(startDate, new Date(props.data.dateAtSixTickets), formattedData, false).confidence[3].value : null),\r\n                skew: addDays(new Date(props.data.dateAtSixTickets), (isValidDate(new Date(props.data.dateAtSixTickets))) ? test(startDate, new Date(props.data.dateAtSixTickets), formattedData, true).confidence[3].value : null)\r\n            },\r\n            elevenTix: {\r\n                today: new Date(props.data.dateAtElevenTickets),\r\n                normal: addDays(new Date(props.data.dateAtElevenTickets), (isValidDate(new Date(props.data.dateAtElevenTickets))) ? test(startDate, new Date(props.data.dateAtElevenTickets), formattedData, false).confidence[3].value : null),\r\n                skew: addDays(new Date(props.data.dateAtElevenTickets), (isValidDate(new Date(props.data.dateAtElevenTickets))) ? test(startDate, new Date(props.data.dateAtElevenTickets), formattedData, true).confidence[3].value : null)\r\n            },\r\n            twentyFivePercent : {\r\n                today: new Date(twentyFivePercentDone + earliestDate.getTime()),\r\n                normal: addDays(new Date(twentyFivePercentDone + earliestDate.getTime()), (isValidDate(new Date(twentyFivePercentDone + earliestDate.getTime()))) ? test(startDate, new Date(twentyFivePercentDone + earliestDate.getTime()), formattedData, false).confidence[3].value : null),\r\n                skew: addDays(new Date(twentyFivePercentDone + earliestDate.getTime()), (isValidDate(new Date(twentyFivePercentDone + earliestDate.getTime()))) ? test(startDate, new Date(twentyFivePercentDone + earliestDate.getTime()), formattedData, true).confidence[3].value : null)\r\n            },\r\n            fiftyPercent : {\r\n                today: new Date(twentyFivePercentDone * 2 + earliestDate.getTime()),\r\n                normal: addDays(new Date(twentyFivePercentDone * 2 + earliestDate.getTime()), (isValidDate(new Date(twentyFivePercentDone * 2 + earliestDate.getTime()))) ? test(startDate, new Date(twentyFivePercentDone * 2 + earliestDate.getTime()), formattedData, false).confidence[3].value : null),\r\n                skew: addDays(new Date(twentyFivePercentDone * 2 + earliestDate.getTime()), (isValidDate(new Date(twentyFivePercentDone * 2 + earliestDate.getTime()))) ? test(startDate, new Date(twentyFivePercentDone * 2 + earliestDate.getTime()), formattedData, true).confidence[3].value : null)\r\n            },\r\n            seventyFivePercent : {\r\n                today: new Date(twentyFivePercentDone * 3 + earliestDate.getTime()),\r\n                normal: addDays(new Date(twentyFivePercentDone * 3 + earliestDate.getTime()), (isValidDate(new Date(twentyFivePercentDone * 3 + earliestDate.getTime()))) ? test(startDate, new Date(twentyFivePercentDone * 3 + earliestDate.getTime()), formattedData, false).confidence[3].value : null),\r\n                skew: addDays(new Date(twentyFivePercentDone * 3 + earliestDate.getTime()), (isValidDate(new Date(twentyFivePercentDone * 3 + earliestDate.getTime()))) ? test(startDate, new Date(twentyFivePercentDone * 3 + earliestDate.getTime()), formattedData, true).confidence[3].value : null)\r\n            }, \r\n        };\r\n\r\n        function setStyle(confidenceDate) {\r\n            const green = {\r\n                background: \"green\"\r\n            }\r\n            const red = {\r\n                background: \"red\"\r\n            }\r\n            const white = {\r\n                background: \"white\"\r\n            }\r\n            if (!isValidDate(confidenceDate)) {\r\n                return white;\r\n            } else {\r\n            return (new Date(confidenceDate).getTime() > tableData.completionDate.getTime()) ? green : red\r\n            }\r\n        }\r\n\r\n        return (\r\n                <tbody>\r\n                <tr>\r\n                    <td>{props.data.projectName}</td>\r\n                    <td>{formatDate(tableData.completionDate)}</td>\r\n                    <td>{formatDate(tableData.threeTix.today)}</td>\r\n                    <td style={setStyle(tableData.threeTix.normal)}>{formatDate(tableData.threeTix.normal)}</td>\r\n                    <td style={setStyle(tableData.threeTix.skew)}>{formatDate(tableData.threeTix.skew)}</td>\r\n                    <td>{formatDate(tableData.sixTix.today)}</td>\r\n                    <td style={setStyle(tableData.sixTix.normal)}>{formatDate(tableData.sixTix.normal)}</td>\r\n                    <td style={setStyle(tableData.sixTix.skew)}>{formatDate(tableData.sixTix.skew)}</td>\r\n                    <td>{formatDate(tableData.elevenTix.today)}</td>\r\n                    <td style={setStyle(tableData.elevenTix.normal)}>{formatDate(tableData.elevenTix.normal)}</td>\r\n                    <td style={setStyle(tableData.elevenTix.skew)}>{formatDate(tableData.elevenTix.skew)}</td>\r\n                    <td>{formatDate(tableData.twentyFivePercent.today)}</td>\r\n                    <td style={setStyle(tableData.twentyFivePercent.normal)}>{formatDate(tableData.twentyFivePercent.normal)}</td>\r\n                    <td style={setStyle(tableData.twentyFivePercent.skew)}>{formatDate(tableData.twentyFivePercent.skew)}</td>\r\n                    <td>{formatDate(tableData.fiftyPercent.today)}</td>\r\n                    <td style={setStyle(tableData.fiftyPercent.normal)}>{formatDate(tableData.fiftyPercent.normal)}</td>\r\n                    <td style={setStyle(tableData.fiftyPercent.skew)}>{formatDate(tableData.fiftyPercent.skew)}</td>\r\n                    <td>{formatDate(tableData.seventyFivePercent.today)}</td>\r\n                    <td style={setStyle(tableData.seventyFivePercent.normal)}>{formatDate(tableData.seventyFivePercent.normal)}</td>\r\n                    <td style={setStyle(tableData.seventyFivePercent.skew)}>{formatDate(tableData.seventyFivePercent.skew)}</td>\r\n                </tr>\r\n                </tbody>\r\n        )\r\n    }\r\n}\r\nexport default Chart;","B:\\Documents\\JSStuff\\project-predictor\\src\\MonteCarloFrequencyDiagram.js",[],"B:\\Documents\\JSStuff\\project-predictor\\src\\CumulativeFlowDiagram.js",[],"B:\\Documents\\JSStuff\\project-predictor\\src\\LeadTimeConfidenceValues.js",["73"],"function LeadTimeConfidenceValues(props) {\r\nconst mean = (list) => list.reduce((a, b) => a + b) / list.length;\r\n\r\n  return (\r\n    <div>\r\n      <h4>Historical Values</h4>\r\n      <p>\r\n        {props.data.leadtime.leadTimeLastEleven.map((o) => (\r\n          <>{o},</>\r\n        ))}\r\n      </p>\r\n      <p>Mean: {Math.round(props.data.leadtime.lastElevenData.mean * 100) / 100}</p>\r\n      <p>Median: {Math.round(props.data.leadtime.lastElevenData.median * 100) / 100}</p>\r\n      <p>Std Dev: {Math.round(props.data.leadtime.lastElevenData.sd * 100) / 100}</p>\r\n      <h4>Random Values</h4>\r\n      <p>Mean: {Math.round(props.data.leadtime.randLastElevenData.mean * 100) / 100}</p>\r\n      <p>Median: {Math.round(props.data.leadtime.randLastElevenData.median * 100) / 100}</p>\r\n      <p>Std Dev: {Math.round(props.data.leadtime.randLastElevenData.sd * 100) / 100}</p>\r\n      <p>Mode: {props.data.leadtime.randLastElevenData.mode}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default LeadTimeConfidenceValues;\r\n","B:\\Documents\\JSStuff\\project-predictor\\src\\monteCarlo.js",["74","75","76","77","78","79","80","81","82","83","84","85"],"B:\\Documents\\JSStuff\\project-predictor\\src\\LeadTimeFrequencyDiagram.js",[],"B:\\Documents\\JSStuff\\project-predictor\\src\\MonteCarloConfidenceValues.js",[],"B:\\Documents\\JSStuff\\project-predictor\\src\\LeadTimeRandomFrequencyDiagram.js",[],{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","severity":1,"message":"91","line":2,"column":8,"nodeType":"92","messageId":"93","endLine":2,"endColumn":18},{"ruleId":"90","severity":1,"message":"94","line":27,"column":28,"nodeType":"92","messageId":"93","endLine":27,"endColumn":47},{"ruleId":"90","severity":1,"message":"95","line":161,"column":10,"nodeType":"92","messageId":"93","endLine":161,"endColumn":29},{"ruleId":"90","severity":1,"message":"96","line":173,"column":10,"nodeType":"92","messageId":"93","endLine":173,"endColumn":22},{"ruleId":"90","severity":1,"message":"97","line":152,"column":9,"nodeType":"92","messageId":"93","endLine":152,"endColumn":25},{"ruleId":"90","severity":1,"message":"98","line":160,"column":10,"nodeType":"92","messageId":"93","endLine":160,"endColumn":14},{"ruleId":"99","severity":1,"message":"100","line":39,"column":28,"nodeType":"101","messageId":"102","endLine":39,"endColumn":30},{"ruleId":"99","severity":1,"message":"100","line":40,"column":28,"nodeType":"101","messageId":"102","endLine":40,"endColumn":30},{"ruleId":"99","severity":1,"message":"100","line":69,"column":103,"nodeType":"101","messageId":"102","endLine":69,"endColumn":105},{"ruleId":"90","severity":1,"message":"103","line":117,"column":11,"nodeType":"92","messageId":"93","endLine":117,"endColumn":14},{"ruleId":"90","severity":1,"message":"104","line":270,"column":15,"nodeType":"92","messageId":"93","endLine":270,"endColumn":19},{"ruleId":"90","severity":1,"message":"105","line":2,"column":7,"nodeType":"92","messageId":"93","endLine":2,"endColumn":11},{"ruleId":"90","severity":1,"message":"106","line":35,"column":10,"nodeType":"92","messageId":"93","endLine":35,"endColumn":27},{"ruleId":"99","severity":1,"message":"100","line":124,"column":25,"nodeType":"101","messageId":"102","endLine":124,"endColumn":27},{"ruleId":"99","severity":1,"message":"100","line":125,"column":25,"nodeType":"101","messageId":"102","endLine":125,"endColumn":27},{"ruleId":"99","severity":1,"message":"100","line":161,"column":53,"nodeType":"101","messageId":"102","endLine":161,"endColumn":55},{"ruleId":"90","severity":1,"message":"103","line":223,"column":9,"nodeType":"92","messageId":"93","endLine":223,"endColumn":12},{"ruleId":"90","severity":1,"message":"104","line":407,"column":11,"nodeType":"92","messageId":"93","endLine":407,"endColumn":15},{"ruleId":"99","severity":1,"message":"100","line":411,"column":24,"nodeType":"101","messageId":"102","endLine":411,"endColumn":26},{"ruleId":"99","severity":1,"message":"100","line":439,"column":26,"nodeType":"101","messageId":"102","endLine":439,"endColumn":28},{"ruleId":"99","severity":1,"message":"100","line":441,"column":33,"nodeType":"101","messageId":"102","endLine":441,"endColumn":35},{"ruleId":"99","severity":1,"message":"100","line":443,"column":33,"nodeType":"101","messageId":"102","endLine":443,"endColumn":35},{"ruleId":"90","severity":1,"message":"107","line":700,"column":10,"nodeType":"92","messageId":"93","endLine":700,"endColumn":20},{"ruleId":"90","severity":1,"message":"108","line":716,"column":10,"nodeType":"92","messageId":"93","endLine":716,"endColumn":14},"no-native-reassign",["109"],"no-negated-in-lhs",["110"],"no-unused-vars","'FileReader' is defined but never used.","Identifier","unusedVar","'setMonteCarloResult' is assigned a value but never used.","'DatePickerStartDate' is defined but never used.","'exportToJson' is defined but never used.","'fixedHeightPaper' is assigned a value but never used.","'data' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'sum' is assigned a value but never used.","'test' is assigned a value but never used.","'mean' is assigned a value but never used.","'leadTimeAndStatus' is defined but never used.","'formatDate' is defined but never used.","'test' is defined but never used.","no-global-assign","no-unsafe-negation"]