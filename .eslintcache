[{"B:\\Documents\\JSStuff\\project-predictor\\src\\FileReader.js":"1","B:\\Documents\\JSStuff\\project-predictor\\src\\index.js":"2","B:\\Documents\\JSStuff\\project-predictor\\src\\Chart.js":"3"},{"size":5936,"mtime":1607812175189,"results":"4","hashOfConfig":"5"},{"size":517,"mtime":1606590003852,"results":"6","hashOfConfig":"5"},{"size":34027,"mtime":1607382458191,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1l47mge",{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"12","messages":"13","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"B:\\Documents\\JSStuff\\project-predictor\\src\\FileReader.js",["15","16","17","18","19"],"B:\\Documents\\JSStuff\\project-predictor\\src\\index.js",[],"B:\\Documents\\JSStuff\\project-predictor\\src\\Chart.js",["20","21","22","23","24"],"import React from 'react';\r\nimport Plot from 'react-plotly.js';\r\nimport skewnorm from 'skew-normal-random';\r\n\r\nvar createdDate = 'Created';\r\nconst leadTimeMaxValue = 15;\r\n\r\nfunction dateChange(data) {\r\n    let data3 = data.map(datastring => {\r\n        datastring['Lead Time'] = calcBusinessDays(new Date(datastring['In Progress']), new Date(datastring['Merged']));\r\n        datastring['In Progress'] = new Date(datastring['In Progress']);\r\n        datastring[createdDate] = new Date(datastring[createdDate]);\r\n        datastring['Merged'] = new Date(datastring['Merged']);\r\n        datastring['Closed'] = new Date(datastring['Closed']);\r\n        return datastring;\r\n    })\r\n    return data3;\r\n}\r\n\r\nfunction removeNotWorkedTickets(data) {\r\n    let newArr = [];\r\n    for (var i = 0; i < data.length; i++) {\r\n        if (!isValidDate(data[i].Closed) || (isValidDate(data[i].Closed) && isValidDate(data[i].Merged))) {\r\n            newArr.push(data[i]);\r\n        }\r\n    }\r\n    return newArr;\r\n}\r\n\r\nfunction calcBusinessDays(dDate1, dDate2) {         // input given as Date objects\r\n\r\n    var iWeeks, iDateDiff, iAdjust = 0;\r\n\r\n    if (dDate2 < dDate1) return -1;                 // error code if dates transposed\r\n\r\n    var iWeekday1 = dDate1.getDay();                // day of week\r\n    var iWeekday2 = dDate2.getDay();\r\n\r\n    iWeekday1 = (iWeekday1 == 0) ? 7 : iWeekday1;   // change Sunday from 0 to 7\r\n    iWeekday2 = (iWeekday2 == 0) ? 7 : iWeekday2;\r\n\r\n    if ((iWeekday1 > 5) && (iWeekday2 > 5)) iAdjust = 1;  // adjustment if both days on weekend\r\n\r\n    iWeekday1 = (iWeekday1 > 5) ? 5 : iWeekday1;    // only count weekdays\r\n    iWeekday2 = (iWeekday2 > 5) ? 5 : iWeekday2;\r\n\r\n    // calculate differnece in weeks (1000mS * 60sec * 60min * 24hrs * 7 days = 604800000)\r\n    iWeeks = Math.floor((dDate2.getTime() - dDate1.getTime()) / 604800000)\r\n\r\n    if (iWeekday1 <= iWeekday2) {\r\n        iDateDiff = (iWeeks * 5) + (iWeekday2 - iWeekday1)\r\n    } else {\r\n        iDateDiff = ((iWeeks + 1) * 5) - (iWeekday1 - iWeekday2)\r\n    }\r\n\r\n    iDateDiff -= iAdjust                            // take into account both days on weekend\r\n\r\n    return (iDateDiff + 1);                         // add 1 because dates are inclusive\r\n\r\n}\r\n\r\nfunction findEarliestDate(dateArray, startDate) {\r\n    var minIdx = 0, maxIdx = 0;\r\n    for (var i = 0; i < dateArray.length; i++) {\r\n        if (isValidDate(dateArray[i]['In Progress']) && isValidDate(dateArray[minIdx]['In Progress'])) {\r\n            if (dateArray[i]['In Progress'] > dateArray[maxIdx]['In Progress']) maxIdx = i;\r\n            if (dateArray[i]['In Progress'] < dateArray[minIdx]['In Progress']) minIdx = i;\r\n        }\r\n        if (isValidDate(dateArray[i]['In Progress']) && isValidDate(dateArray[minIdx]['In Progress']) == false) minIdx = i;\r\n    }\r\n    if (!startDate) {\r\n        return new Date(dateArray[minIdx]['In Progress']);\r\n    } else {\r\n        return startDate;\r\n    }\r\n}\r\n\r\nfunction isValidDate(date) {\r\n    return date && Object.prototype.toString.call(date) === \"[object Date]\" && !isNaN(date);\r\n}\r\n\r\nfunction createDateArray(array, today, minimum) {\r\n    var graphXAxisNum = Math.floor(today.getTime() - minimum.getTime()) / 86400000;\r\n    var xaxis = [];\r\n    for (var j = 0; j < graphXAxisNum; j++) {\r\n        let day = {\r\n            \"Day\": addDays(minimum, j),\r\n            \"Backlog\": getBacklogAndWorkDone(addDays(minimum, j), array, createdDate),\r\n            \"Work_Done\": getBacklogAndWorkDone(addDays(minimum, j), array, 'Merged'),\r\n            \"Work_Added\": getBacklogAndWorkDone(addDays(minimum, j), array, createdDate) - getBacklogAndWorkDone(addDays(minimum, j - 1), array, createdDate),\r\n        }\r\n        xaxis[j] = day;\r\n    }\r\n    return xaxis;\r\n}\r\n\r\nfunction addDays(date, days) {\r\n    var result = new Date(date);\r\n    result.setDate(result.getDate() + days);\r\n    return result;\r\n}\r\n\r\nfunction getBacklogAndWorkDone(date, array, key) {\r\n    let count = 0;\r\n    for (var j = 0; j < array.length; j++) {\r\n        if (isValidDate(date) && isValidDate(array[j][key])) {\r\n            if (date.getTime() > array[j][key].getTime()) {\r\n                count++;\r\n            }\r\n        }\r\n    }\r\n    return count;\r\n}\r\n\r\n\r\nfunction computeMeanSdAndItervalRangeMinMax(list) {\r\n    const sum = list.reduce((a, b) => a + b, 0);\r\n    const mean = list.reduce((a, b) => a + b) / list.length;\r\n    const sumMinusMean = list.reduce((a, b) => a + (b - mean) * (b - mean), 0);\r\n\r\n    return {\r\n        mean: mean,\r\n        sd: Math.sqrt(sumMinusMean / (list.length - 1)),\r\n        mode: median(mode(list)),\r\n        median: median(list),\r\n        range: [Math.min(...list), Math.max(...list)],\r\n        best_case: mean - 2 * (Math.sqrt(sumMinusMean / (list.length - 1))),\r\n        worst_case: mean + 2 * (Math.sqrt(sumMinusMean / (list.length - 1)))\r\n    };\r\n}\r\n\r\nfunction mode(numbers) {\r\n    // as result can be bimodal or multi-modal,\r\n    // the returned result is provided as an array\r\n    // mode of [3, 5, 4, 4, 1, 1, 2, 3] = [1, 3, 4]\r\n    var modes = [], count = [], i, number, maxIndex = 0, result = [];\r\n    for (let i = 0; i < numbers.length; i++) {\r\n        let rand_num = numbers[i];\r\n        let rounded = round_to_precision(rand_num, 1)\r\n        result.push(rounded);\r\n    }\r\n\r\n    for (i = 0; i < result.length; i += 1) {\r\n        number = result[i];\r\n        count[number] = (count[number] || 0) + 1;\r\n        if (count[number] > maxIndex) {\r\n            maxIndex = count[number];\r\n        }\r\n    }\r\n\r\n    for (i in count)\r\n        if (count.hasOwnProperty(i)) {\r\n            if (count[i] === maxIndex) {\r\n                modes.push(Number(i));\r\n            }\r\n        }\r\n\r\n    return modes;\r\n}\r\n\r\nfunction median(numbers) {\r\n    // median of [3, 5, 4, 4, 1, 1, 2, 3] = 3\r\n    var median = 0, numsLen = numbers.length;\r\n    numbers.sort((a, b) => a - b);\r\n\r\n    if (\r\n        numsLen % 2 === 0 // is even\r\n    ) {\r\n        // average of two middle numbers\r\n        median = (numbers[numsLen / 2 - 1] + numbers[numsLen / 2]) / 2;\r\n    } else { // is odd\r\n        // middle number only\r\n        median = numbers[(numsLen - 1) / 2];\r\n    }\r\n    return median;\r\n}\r\n\r\n//get the last ll tickets worked to completion\r\n//TODO: Make it so last 11 tickets respect start date\r\nfunction lastElevenTickets(array, today) {\r\n    var temp = array.slice().sort((a, b) => b['Merged'] - a['Merged']);\r\n\r\n    let l = 0;\r\n    let testarr = [];\r\n\r\n    for (var k = 0; k < temp.length; k++) {\r\n        if (l >= 11) break;\r\n        if (isValidDate(temp[k]['Merged']) && temp[k]['Merged'] < today && temp[k]['Lead Time'] < leadTimeMaxValue) {\r\n            testarr.push(temp[k]);\r\n            l = l + 1;\r\n        }\r\n    }\r\n    //mostRecentElevenTicketsArray = testarr\r\n    return testarr;\r\n}\r\n\r\n\r\nfunction workInParrallel(array, today) {\r\n    let dateRange = [];\r\n    const lastDay = {\r\n        date: today,\r\n        in_progress: false,\r\n        merged: false,\r\n        last_day: true\r\n    };\r\n    for (var i = 0; i < array.length; i++) {\r\n        if (isValidDate(array[i]['In Progress']) && isValidDate(array[i]['Merged'])) {\r\n            const toadd = [{\r\n                date: array[i]['In Progress'],\r\n                in_progress: true,\r\n                merged: false,\r\n                last_day: false\r\n            }, {\r\n                date: array[i]['Merged'],\r\n                in_progress: false,\r\n                merged: true,\r\n                last_day: false\r\n            }];\r\n            dateRange = dateRange.concat(toadd);\r\n        }\r\n        if (isValidDate(array[i]['In Progress']) && !isValidDate(array[i]['Merged'])) {\r\n            dateRange = dateRange.concat({\r\n                date: array[i]['In Progress'],\r\n                in_progress: true,\r\n                merged: false,\r\n                last_day: false\r\n            });\r\n        }\r\n        if (array[i]['In Prgress'] >= today) break;\r\n    }\r\n    dateRange = dateRange.concat(lastDay);\r\n    //[0] earliest date -> [n] last date\r\n    var filteredDateRange = dateRange.slice().sort((a, b) => a.date - b.date);\r\n    if (!filteredDateRange[0].in_progress) console.error(\"something is wrong with this csv, the first item has a merged date before the in progress date\");\r\n    let multiplyer = 1;\r\n    let sum = 0;\r\n    for (var j = 0; j < filteredDateRange.length - 1; j++) {\r\n\r\n        sum = sum + ((filteredDateRange[j + 1].date.getTime() - filteredDateRange[j].date.getTime()) * multiplyer);\r\n        if (filteredDateRange[j + 1].in_progress) {\r\n            multiplyer++;\r\n        }\r\n        if (filteredDateRange[j + 1].merged) {\r\n            multiplyer--;\r\n        }\r\n        if (filteredDateRange[j + 1].last_day) {\r\n            break;\r\n        }\r\n    }\r\n    let total = today.getTime() - filteredDateRange[0].date.getTime();\r\n    let workInParrallelValue = sum / total;\r\n\r\n    return workInParrallelValue;\r\n\r\n}\r\n\r\n\r\nfunction randNumFromDistribution(rangeObject, distributionType) {\r\n\r\n    let n = 10000;\r\n    let temparray = [];\r\n\r\n\r\n    const randn_bm = () => {\r\n        var u = 0, v = 0;\r\n        while (u === 0) u = Math.random(); //Converting [0,1) to (0,1)\r\n        while (v === 0) v = Math.random();\r\n        const R = Math.sqrt(-2.0 * Math.log(u));\r\n        const Θ = 2.0 * Math.PI * v;\r\n        const test = [R * Math.cos(Θ), R * Math.sin(Θ)];\r\n\r\n        const mean = rangeObject.mean;\r\n        const ω = rangeObject.sd;\r\n        //Pearson's first skewness coefficient (mode skewness)\r\n        const α = (rangeObject.mean - rangeObject.mode) / ω;\r\n        const 𝛿 = α / Math.sqrt(1 + α * α);\r\n        const ξ = rangeObject.mean - ω * 𝛿 * Math.sqrt(2 / Math.PI);\r\n        const med = rangeObject.median;\r\n\r\n        function randomNormal(ξ, ω, median) {\r\n            let num = Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);\r\n            num = num * ω + median;\r\n            if ((num - median) / ω > 3) return randn_bm(); // remove outliers more than 3 standard deviations away from median\r\n            return num;\r\n        }\r\n\r\n        // function randomSkewNormal(test, ξ, ω, α = 7) {\r\n        //     const [u0, v] = test;\r\n        //     if (α === 0) {\r\n        //         return ξ + ω * u0;\r\n        //     }\r\n        //     const 𝛿 = α / Math.sqrt(1 + α * α);\r\n        //     const u1 = 𝛿 * u0 + Math.sqrt(1 - 𝛿 * 𝛿) * v;\r\n        //     //const z = u0 >= 0 ? u1 : -u1;\r\n        //     const z = u1;\r\n        //     //origin was ξ + ω * z\r\n        //     let num = ξ + ω * z;\r\n        //     //if (num < 0) num = randn_bm();\r\n        //     return num;\r\n        // }\r\n\r\n        function randomSkewNormal(alpha, location, scale) {\r\n            let num = skewnorm.rSkewNorm(alpha, location, scale);\r\n            return num;\r\n        }\r\n\r\n\r\n        if (distributionType) {\r\n            return randomSkewNormal(α, ξ, ω);\r\n        } else {\r\n            return randomNormal(mean, ω, med)\r\n        }\r\n\r\n    }\r\n\r\n\r\n    // Create n samples between min and max\r\n    for (let i = 0; i < n; i++) {\r\n        let rand_num = randn_bm();\r\n        temparray.push(rand_num);\r\n    }\r\n\r\n    return temparray;\r\n}\r\n\r\nfunction monteCarlo(dates, randomNumsLeadTime, randomNumsWorkAdded, today, formattedData) {\r\n    let workLeft = dates[dates.length - 1].Backlog - dates[dates.length - 1].Work_Done;\r\n    let adjustedWorkLeft = workLeft / workInParrallel(lastElevenTickets(formattedData, today), today);\r\n    let sum = randomNumsLeadTime[Math.floor(Math.random() * randomNumsLeadTime.length)] * adjustedWorkLeft;\r\n    if (sum < 0) sum = 0;\r\n    \r\n    return sum //* (1 + randomNumsWorkAdded[Math.floor(Math.random() * randomNumsWorkAdded.length)]);\r\n}\r\n\r\nfunction runMonteCarlo(n, dates, randomNumsLeadTime, randomNumsWorkAdded, today, formattedData) {\r\n    let runArray = [];\r\n    for (let i = 0; i < n; i++) {\r\n        runArray.push(monteCarlo(dates, randomNumsLeadTime, randomNumsWorkAdded, today, formattedData));\r\n    }\r\n    let monteCarloResults = {\r\n        daysToCompletionArray: runArray,\r\n        finalDistributionValuies: computeMeanSdAndItervalRangeMinMax(runArray),\r\n        workInParrallelValue: workInParrallel(lastElevenTickets(formattedData, today), today),\r\n        randomWorkAdded: computeMeanSdAndItervalRangeMinMax(randomNumsWorkAdded),\r\n        confidence: getConfidence(runArray),\r\n        bestAndWorstCaseForPlotObject: bestAndWorstCaseForPlot(dates, computeMeanSdAndItervalRangeMinMax(runArray), computeMeanSdAndItervalRangeMinMax(randomNumsWorkAdded), getConfidence(runArray))\r\n\r\n    };\r\n    console.log(monteCarloResults);\r\n    return monteCarloResults;\r\n}\r\n\r\nconst round_to_precision = (x, precision) => {\r\n    var y = +x + (precision === undefined ? 0.5 : precision / 2);\r\n    return y - (y % (precision === undefined ? 1 : +precision));\r\n}\r\n\r\nfunction getConfidence(rawDataArray) {\r\n    let result = [];\r\n\r\n    for (let j = 0; j < Math.max(...rawDataArray); j++) {\r\n        result[j] = 0;\r\n    }\r\n\r\n    for (let i = 0; i < rawDataArray.length; i++) {\r\n        let rand_num = rawDataArray[i];\r\n        let rounded = round_to_precision(rand_num, 1)\r\n        result[rounded] += 1;\r\n    }\r\n\r\n    let hc_data = [];\r\n    for (const [key, val] of Object.entries(result)) {\r\n        hc_data.push({ \"x\": parseFloat(key), \"y\": val / rawDataArray.length });\r\n    }\r\n\r\n    // Sort\r\n    hc_data = hc_data.sort(function (a, b) {\r\n        if (a.x < b.x) return -1;\r\n        if (a.x > b.x) return 1;\r\n        return 0;\r\n    });\r\n\r\n    //TODO: use hc_data as a way to create a custom frequency distribution\r\n    let sum = 0;\r\n    let confidence = [\r\n        { percent: 50, value: undefined },\r\n        { percent: 75, value: undefined },\r\n        { percent: 90, value: undefined },\r\n        { percent: 95, value: undefined },\r\n        { percent: 99, value: undefined }\r\n    ];\r\n    for (let k = 0; k < hc_data.length; k++) {\r\n        sum = sum + hc_data[k].y * 100;\r\n        for (let l = 0; l < confidence.length; l++) {\r\n            if (sum < confidence[l].percent) {\r\n                confidence[l].value = hc_data[k].x + 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    return confidence;\r\n}\r\n\r\nfunction bestAndWorstCaseForPlot(historicalData, finalDistributionValuies, randomWorkAdded, confidence) {\r\n\r\n    let lastDay = historicalData[historicalData.length - 1].Day.getTime() / 86400000;\r\n    let lastDayBacklogTotal = historicalData[historicalData.length - 1].Backlog;\r\n    let lastDayDoneTotal = historicalData[historicalData.length - 1].Work_Done;\r\n    let worstCaseDays = confidence[3].value;\r\n    let bestCaseDays = confidence[0].value;\r\n    let averageWorkAdded = randomWorkAdded.median;\r\n    let resultArray = [];\r\n    for (let i = 0; i < worstCaseDays; i++) {\r\n        const date = new Date((i + lastDay) * 86400000), bckLgInc = averageWorkAdded * i + lastDayBacklogTotal, doneWC = (i * (((averageWorkAdded * worstCaseDays) + lastDayBacklogTotal) - lastDayDoneTotal) / worstCaseDays) + lastDayDoneTotal, doneBC = (i * (((averageWorkAdded * bestCaseDays) + lastDayBacklogTotal) - lastDayDoneTotal) / bestCaseDays) + lastDayDoneTotal;\r\n        if (doneBC > lastDayBacklogTotal) {\r\n            resultArray.push(\r\n                {\r\n                    day: date,\r\n                    backlogIncrease: bckLgInc,\r\n                    doneWorstCase: doneWC\r\n                }\r\n            );\r\n        } else {\r\n            resultArray.push(\r\n                {\r\n                    day: date,\r\n                    backlogIncrease: bckLgInc,\r\n                    doneWorstCase: doneWC,\r\n                    doneBestCase: doneBC\r\n                }\r\n            )\r\n        }\r\n    }\r\n    return resultArray;\r\n}\r\n\r\n\r\nfunction formatDate(date) {\r\n    if (!isValidDate(date)){\r\n        return null\r\n    } else {\r\n    var d = new Date(date),\r\n        month = '' + (d.getMonth() + 1),\r\n        day = '' + d.getDate(),\r\n        year = d.getFullYear();\r\n\r\n    if (month.length < 2) \r\n        month = '0' + month;\r\n    if (day.length < 2) \r\n        day = '0' + day;\r\n\r\n    return [year, month, day].join('-');\r\n    }\r\n}\r\n\r\nfunction test(startDate, today, formattedData, distType) {\r\n    let randomArr = randNumFromDistribution(computeMeanSdAndItervalRangeMinMax(lastElevenTickets(formattedData, today).map(o => o['Lead Time'])), distType);\r\n    return runMonteCarlo(10000, createDateArray(formattedData, today, findEarliestDate(formattedData, startDate)), randomArr, createDateArray(formattedData, today, findEarliestDate(formattedData, startDate)).map(o => o.Work_Added), today, formattedData)\r\n}\r\n\r\n\r\nfunction Chart(props) {\r\n    console.log(props);\r\n    let today = new Date(props.data.today);\r\n    const distType = props.data.isChecked;\r\n    let startDate = props.data.startDate == null ? false : new Date(props.data.startDate);\r\n    const formattedData = removeNotWorkedTickets(dateChange(props.data.data));\r\n    console.log(formattedData)\r\n\r\n    if (!props.data.isTest) {\r\n    let forplot = createDateArray(formattedData, today, findEarliestDate(formattedData, startDate));\r\n    const lastElevenData = computeMeanSdAndItervalRangeMinMax(lastElevenTickets(formattedData, today).map(o => o['Lead Time']));\r\n    const randLastElevenData = computeMeanSdAndItervalRangeMinMax(randNumFromDistribution(lastElevenData), distType);\r\n    const historicalLastElevenTickets = computeMeanSdAndItervalRangeMinMax(lastElevenTickets(formattedData, today).map(o => o['Lead Time']));\r\n    const workAdded = computeMeanSdAndItervalRangeMinMax(forplot.map(o => o.Work_Added));\r\n    const randWorkadded = computeMeanSdAndItervalRangeMinMax(randNumFromDistribution(workAdded));\r\n    let myBoyMonte = runMonteCarlo(10000, forplot, randNumFromDistribution(computeMeanSdAndItervalRangeMinMax(lastElevenTickets(formattedData, today).map(o => o['Lead Time'])), distType), forplot.map(o => o.Work_Added), today, formattedData);\r\n\r\n    \r\n        return (\r\n\r\n            <div className=\"center\">\r\n                <div className=\"container\">\r\n                    <Plot\r\n                        data={[\r\n                            //backlog\r\n                            {\r\n                                x: forplot.map(o => o.Day),\r\n                                y: forplot.map(o => o.Backlog),\r\n                                type: 'scatter',\r\n                                mode: 'lines',\r\n                                marker: { color: 'orange' },\r\n                            },\r\n                            //work done\r\n                            {\r\n                                x: forplot.map(o => o.Day),\r\n                                y: forplot.map(o => o.Work_Done),\r\n                                type: 'scatter',\r\n                                mode: 'lines',\r\n                                marker: { color: 'blue' },\r\n                            },\r\n                            {\r\n                                x: myBoyMonte.bestAndWorstCaseForPlotObject.map(o => o.day),\r\n                                y: myBoyMonte.bestAndWorstCaseForPlotObject.map(o => o.backlogIncrease),\r\n                                type: 'scatter',\r\n                                mode: 'lines',\r\n                                marker: { color: 'pink' },\r\n                            },\r\n                            {\r\n                                x: myBoyMonte.bestAndWorstCaseForPlotObject.map(o => o.day),\r\n                                y: myBoyMonte.bestAndWorstCaseForPlotObject.map(o => o.doneWorstCase),\r\n                                type: 'scatter',\r\n                                mode: 'lines',\r\n                                marker: { color: 'red' },\r\n                            },\r\n                            {\r\n                                x: myBoyMonte.bestAndWorstCaseForPlotObject.map(o => o.day),\r\n                                y: myBoyMonte.bestAndWorstCaseForPlotObject.map(o => o.doneBestCase),\r\n                                type: 'scatter',\r\n                                mode: 'lines',\r\n                                marker: { color: 'green' },\r\n                            },\r\n                        ]}\r\n                        layout={{ width: 1000, height: 500, title: 'CFD' }}\r\n                    />\r\n                </div>\r\n                <div className=\"container\">\r\n                    <div className=\"dataBox\">\r\n                        <h1>Monte Carlo Data</h1>\r\n                        <h3>Confidence Values</h3>\r\n                        <p>50%: {myBoyMonte.confidence[0].value} days</p>\r\n                        <p>75%: {myBoyMonte.confidence[1].value} days</p>\r\n                        <p>90%: {myBoyMonte.confidence[2].value} days</p>\r\n                        <p>95%: {myBoyMonte.confidence[3].value} days</p>\r\n                        <h3>Model Values</h3>\r\n                        <p>Mean: {Math.round(myBoyMonte.finalDistributionValuies.mean * 100) / 100}</p>\r\n                        <p>Median: {Math.round(myBoyMonte.finalDistributionValuies.median * 100) / 100}</p>\r\n                        <p>Std Dev: {Math.round(myBoyMonte.finalDistributionValuies.sd * 100) / 100}</p>\r\n                        <p>Mode: {myBoyMonte.finalDistributionValuies.mode}</p>\r\n                        <p>Work in parallel value: {Math.round(myBoyMonte.workInParrallelValue * 100) / 100}</p>\r\n                    </div>\r\n                    <div>\r\n                        <Plot\r\n                            data={[\r\n                                //monteCarlo\r\n                                {\r\n                                    x: myBoyMonte.daysToCompletionArray,\r\n                                    type: 'histogram',\r\n                                    histnorm: 'probability',\r\n                                    marker: {\r\n                                        color: 'rgb(255,100,100)',\r\n                                    },\r\n                                },\r\n                            ]}\r\n                            layout={{ width: 1000, height: 500, title: 'Monte Carlo', xaxis: { range: [0, Math.max(myBoyMonte.daysToCompletionArray)] } }}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"container\">\r\n                    <div className=\"dataBox\">\r\n                        <h1>Lead Time</h1>\r\n                        <h3>Historical Values</h3>\r\n                        <p>{lastElevenTickets(formattedData, today).map(o => o['Lead Time']).map((o) => <>{o},</>)}</p>\r\n                        <p>Mean: {Math.round(historicalLastElevenTickets.mean * 100) / 100}</p>\r\n                        <p>Median: {Math.round(historicalLastElevenTickets.median * 100) / 100}</p>\r\n                        <p>Std Dev: {Math.round(historicalLastElevenTickets.sd * 100) / 100}</p>\r\n                        <h3>Random Values</h3>\r\n                        <p>Mean: {Math.round(randLastElevenData.mean * 100) / 100}</p>\r\n                        <p>Median: {Math.round(randLastElevenData.median * 100) / 100}</p>\r\n                        <p>Std Dev: {Math.round(randLastElevenData.sd * 100) / 100}</p>\r\n                        <p>Mode: {randLastElevenData.mode}</p>\r\n                    </div>\r\n                    <div className=\"plot\">\r\n                        <Plot\r\n                            data={[\r\n                                //backlog\r\n                                {\r\n                                    x: lastElevenTickets(formattedData, today).map(o => o['Lead Time']),\r\n                                    type: 'histogram',\r\n                                    histnorm: 'probability',\r\n                                    marker: {\r\n                                        color: 'rgb(255,255,100)',\r\n                                    },\r\n                                },\r\n                            ]}\r\n                            layout={{ width: 500, height: 500, title: 'Lead Time Frequency Diagram' }}\r\n                        />\r\n                    </div>\r\n                    <div className=\"plot\">\r\n                        <Plot\r\n                            data={[\r\n                                //backlog\r\n                                {\r\n                                    x: randNumFromDistribution(lastElevenData, distType),\r\n                                    type: 'histogram',\r\n                                    histnorm: 'probability',\r\n                                    marker: {\r\n                                        color: 'rgb(255,255,100)',\r\n                                    },\r\n                                },\r\n                            ]}\r\n                            layout={{ width: 500, height: 500, title: 'Lead Time Random Numbers' }}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"container\">\r\n                    <div className=\"dataBox\">\r\n                        <h1>Work Added</h1>\r\n                        <h3>Historical Values</h3>\r\n                        <p>Mean: {Math.round(workAdded.mean * 100) / 100}</p>\r\n                        <p>Median: {Math.round(workAdded.median * 100) / 100}</p>\r\n                        <p>Std Dev: {Math.round(workAdded.sd * 100) / 100}</p>\r\n                        <h3>Random Values</h3>\r\n                        <p>Mean: {Math.round(randWorkadded.mean * 100) / 100}</p>\r\n                        <p>Median: {Math.round(randWorkadded.median * 100) / 100}</p>\r\n                        <p>Std Dev: {Math.round(randWorkadded.sd * 100) / 100}</p>\r\n                        <p>Mode: {randWorkadded.mode}</p>\r\n                    </div>\r\n                    <div className=\"plot\">\r\n                        <Plot\r\n                            data={[\r\n                                //backlog\r\n                                {\r\n                                    x: forplot.map(o => o.Work_Added),\r\n                                    type: 'histogram',\r\n                                    histnorm: 'probability',\r\n                                    marker: {\r\n                                        color: 'rgb(255,255,100)',\r\n                                    },\r\n                                },\r\n                            ]}\r\n                            layout={{ width: 500, height: 500, title: 'Work Added Frequency Diagram' }}\r\n                        />\r\n                    </div>\r\n                    <div className=\"plot\">\r\n                        <Plot\r\n                            data={[\r\n                                //backlog\r\n                                {\r\n                                    x: randNumFromDistribution(workAdded, distType),\r\n                                    type: 'histogram',\r\n                                    histnorm: 'probability',\r\n                                    marker: {\r\n                                        color: 'rgb(255,255,100)',\r\n                                    },\r\n                                },\r\n                            ]}\r\n                            layout={{ width: 500, height: 500, title: 'Work Added Random Numbers' }}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    } else {\r\n        const earliestDate = findEarliestDate(formattedData, startDate)\r\n        const twentyFivePercentDone = ((new Date(props.data.completionDate).getTime() - findEarliestDate(formattedData, startDate).getTime()) / 4)\r\n        let tableData = {\r\n            completionDate: new Date(props.data.completionDate),\r\n            threeTix: {\r\n                today: new Date(props.data.dateAtThreeTickets),\r\n                normal: addDays(new Date(props.data.dateAtThreeTickets), (isValidDate(new Date(props.data.dateAtThreeTickets))) ? test(startDate, new Date(props.data.dateAtThreeTickets), formattedData, false).confidence[3].value : null),\r\n                skew: addDays(new Date(props.data.dateAtThreeTickets), (isValidDate(new Date(props.data.dateAtThreeTickets))) ? test(startDate, new Date(props.data.dateAtThreeTickets), formattedData, true).confidence[3].value : null)\r\n            },\r\n            sixTix: {\r\n                today: new Date(props.data.dateAtSixTickets),\r\n                normal: addDays(new Date(props.data.dateAtSixTickets), (isValidDate(new Date(props.data.dateAtSixTickets))) ? test(startDate, new Date(props.data.dateAtSixTickets), formattedData, false).confidence[3].value : null),\r\n                skew: addDays(new Date(props.data.dateAtSixTickets), (isValidDate(new Date(props.data.dateAtSixTickets))) ? test(startDate, new Date(props.data.dateAtSixTickets), formattedData, true).confidence[3].value : null)\r\n            },\r\n            elevenTix: {\r\n                today: new Date(props.data.dateAtElevenTickets),\r\n                normal: addDays(new Date(props.data.dateAtElevenTickets), (isValidDate(new Date(props.data.dateAtElevenTickets))) ? test(startDate, new Date(props.data.dateAtElevenTickets), formattedData, false).confidence[3].value : null),\r\n                skew: addDays(new Date(props.data.dateAtElevenTickets), (isValidDate(new Date(props.data.dateAtElevenTickets))) ? test(startDate, new Date(props.data.dateAtElevenTickets), formattedData, true).confidence[3].value : null)\r\n            },\r\n            twentyFivePercent : {\r\n                today: new Date(twentyFivePercentDone + earliestDate.getTime()),\r\n                normal: addDays(new Date(twentyFivePercentDone + earliestDate.getTime()), (isValidDate(new Date(twentyFivePercentDone + earliestDate.getTime()))) ? test(startDate, new Date(twentyFivePercentDone + earliestDate.getTime()), formattedData, false).confidence[3].value : null),\r\n                skew: addDays(new Date(twentyFivePercentDone + earliestDate.getTime()), (isValidDate(new Date(twentyFivePercentDone + earliestDate.getTime()))) ? test(startDate, new Date(twentyFivePercentDone + earliestDate.getTime()), formattedData, true).confidence[3].value : null)\r\n            },\r\n            fiftyPercent : {\r\n                today: new Date(twentyFivePercentDone * 2 + earliestDate.getTime()),\r\n                normal: addDays(new Date(twentyFivePercentDone * 2 + earliestDate.getTime()), (isValidDate(new Date(twentyFivePercentDone * 2 + earliestDate.getTime()))) ? test(startDate, new Date(twentyFivePercentDone * 2 + earliestDate.getTime()), formattedData, false).confidence[3].value : null),\r\n                skew: addDays(new Date(twentyFivePercentDone * 2 + earliestDate.getTime()), (isValidDate(new Date(twentyFivePercentDone * 2 + earliestDate.getTime()))) ? test(startDate, new Date(twentyFivePercentDone * 2 + earliestDate.getTime()), formattedData, true).confidence[3].value : null)\r\n            },\r\n            seventyFivePercent : {\r\n                today: new Date(twentyFivePercentDone * 3 + earliestDate.getTime()),\r\n                normal: addDays(new Date(twentyFivePercentDone * 3 + earliestDate.getTime()), (isValidDate(new Date(twentyFivePercentDone * 3 + earliestDate.getTime()))) ? test(startDate, new Date(twentyFivePercentDone * 3 + earliestDate.getTime()), formattedData, false).confidence[3].value : null),\r\n                skew: addDays(new Date(twentyFivePercentDone * 3 + earliestDate.getTime()), (isValidDate(new Date(twentyFivePercentDone * 3 + earliestDate.getTime()))) ? test(startDate, new Date(twentyFivePercentDone * 3 + earliestDate.getTime()), formattedData, true).confidence[3].value : null)\r\n            },\r\n            \r\n        };\r\n\r\n        function setStyle(confidenceDate) {\r\n            const green = {\r\n                background: \"green\"\r\n            }\r\n            const red = {\r\n                background: \"red\"\r\n            }\r\n            const white = {\r\n                background: \"white\"\r\n            }\r\n            if (!isValidDate(confidenceDate)) {\r\n                return white;\r\n            } else {\r\n            return (new Date(confidenceDate).getTime() > tableData.completionDate.getTime()) ? green : red\r\n            }\r\n        }\r\n\r\n        return (\r\n                <tbody>\r\n                <tr>\r\n                    <td>{props.data.projectName}</td>\r\n                    <td>{formatDate(tableData.completionDate)}</td>\r\n                    <td>{formatDate(tableData.threeTix.today)}</td>\r\n                    <td style={setStyle(tableData.threeTix.normal)}>{formatDate(tableData.threeTix.normal)}</td>\r\n                    <td style={setStyle(tableData.threeTix.skew)}>{formatDate(tableData.threeTix.skew)}</td>\r\n                    <td>{formatDate(tableData.sixTix.today)}</td>\r\n                    <td style={setStyle(tableData.sixTix.normal)}>{formatDate(tableData.sixTix.normal)}</td>\r\n                    <td style={setStyle(tableData.sixTix.skew)}>{formatDate(tableData.sixTix.skew)}</td>\r\n                    <td>{formatDate(tableData.elevenTix.today)}</td>\r\n                    <td style={setStyle(tableData.elevenTix.normal)}>{formatDate(tableData.elevenTix.normal)}</td>\r\n                    <td style={setStyle(tableData.elevenTix.skew)}>{formatDate(tableData.elevenTix.skew)}</td>\r\n                    <td>{formatDate(tableData.twentyFivePercent.today)}</td>\r\n                    <td style={setStyle(tableData.twentyFivePercent.normal)}>{formatDate(tableData.twentyFivePercent.normal)}</td>\r\n                    <td style={setStyle(tableData.twentyFivePercent.skew)}>{formatDate(tableData.twentyFivePercent.skew)}</td>\r\n                    <td>{formatDate(tableData.fiftyPercent.today)}</td>\r\n                    <td style={setStyle(tableData.fiftyPercent.normal)}>{formatDate(tableData.fiftyPercent.normal)}</td>\r\n                    <td style={setStyle(tableData.fiftyPercent.skew)}>{formatDate(tableData.fiftyPercent.skew)}</td>\r\n                    <td>{formatDate(tableData.seventyFivePercent.today)}</td>\r\n                    <td style={setStyle(tableData.seventyFivePercent.normal)}>{formatDate(tableData.seventyFivePercent.normal)}</td>\r\n                    <td style={setStyle(tableData.seventyFivePercent.skew)}>{formatDate(tableData.seventyFivePercent.skew)}</td>\r\n                </tr>\r\n                </tbody>\r\n        )\r\n    }\r\n}\r\nexport default Chart;",{"ruleId":"25","severity":1,"message":"26","line":1,"column":27,"nodeType":"27","messageId":"28","endLine":1,"endColumn":36},{"ruleId":"25","severity":1,"message":"29","line":22,"column":28,"nodeType":"27","messageId":"28","endLine":22,"endColumn":47},{"ruleId":"25","severity":1,"message":"30","line":122,"column":10,"nodeType":"27","messageId":"28","endLine":122,"endColumn":25},{"ruleId":"25","severity":1,"message":"31","line":134,"column":10,"nodeType":"27","messageId":"28","endLine":134,"endColumn":29},{"ruleId":"25","severity":1,"message":"32","line":146,"column":10,"nodeType":"27","messageId":"28","endLine":146,"endColumn":22},{"ruleId":"33","severity":1,"message":"34","line":39,"column":28,"nodeType":"35","messageId":"36","endLine":39,"endColumn":30},{"ruleId":"33","severity":1,"message":"34","line":40,"column":28,"nodeType":"35","messageId":"36","endLine":40,"endColumn":30},{"ruleId":"33","severity":1,"message":"34","line":69,"column":103,"nodeType":"35","messageId":"36","endLine":69,"endColumn":105},{"ruleId":"25","severity":1,"message":"37","line":117,"column":11,"nodeType":"27","messageId":"28","endLine":117,"endColumn":14},{"ruleId":"25","severity":1,"message":"38","line":270,"column":15,"nodeType":"27","messageId":"28","endLine":270,"endColumn":19},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'setMonteCarloResult' is assigned a value but never used.","'DatePickerToday' is defined but never used.","'DatePickerStartDate' is defined but never used.","'exportToJson' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'sum' is assigned a value but never used.","'test' is assigned a value but never used."]